import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import pick from "lodash/pick";
import React from 'react';
import { InputContext, InputContextKeys, MenuContext, MenuContextKeys, TypeaheadContext, TypeaheadContextKeys } from './Context';
import { getHintText, getInputText, getIsOnlyResult } from '../utils';
import { RETURN } from '../constants';

function getTypeaheadContextValue(props) {
  return _extends({}, pick(props, TypeaheadContextKeys), {
    hintText: getHintText(props),
    isOnlyResult: getIsOnlyResult(props)
  });
}

function getInputContextValue(props) {
  return _extends({}, pick(props, InputContextKeys), {
    ref: props.getReferenceElement,
    value: getInputText(props)
  });
}

function getMenuContextValue(props) {
  return _extends({}, pick(props, MenuContextKeys), {
    show: props.isMenuShown
  });
}

var TypeaheadInnerManager =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TypeaheadInnerManager, _React$Component);

  function TypeaheadInnerManager() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "_handleKeyDown", function (e) {
      var _this$props = _this.props,
          initialItem = _this$props.initialItem,
          onKeyDown = _this$props.onKeyDown,
          onAdd = _this$props.onAdd;

      switch (e.keyCode) {
        case RETURN:
          if (initialItem && getIsOnlyResult(_this.props)) {
            onAdd(initialItem);
          }

          break;

        default:
          break;
      }

      onKeyDown(e);
    });

    return _this;
  }

  var _proto = TypeaheadInnerManager.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        allowNew = _this$props2.allowNew,
        onInitialItemChange = _this$props2.onInitialItemChange,
        results = _this$props2.results; // Clear the initial item when there are no results.

    if (!(allowNew || results.length)) {
      onInitialItemChange(null);
    }
  };

  _proto.render = function render() {
    var inputContext = _extends({}, getInputContextValue(this.props), {
      onKeyDown: this._handleKeyDown
    });

    return React.createElement(TypeaheadContext.Provider, {
      value: getTypeaheadContextValue(this.props)
    }, React.createElement(InputContext.Provider, {
      value: inputContext
    }, React.createElement(MenuContext.Provider, {
      value: getMenuContextValue(this.props)
    }, this.props.children(this.props))));
  };

  return TypeaheadInnerManager;
}(React.Component);

export default TypeaheadInnerManager;