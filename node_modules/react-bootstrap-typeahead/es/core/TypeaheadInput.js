import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import cx from 'classnames';
import React from 'react';
import { InputContext } from './Context';
import { getMenuItemId } from '../utils';

var TypeaheadInput = function TypeaheadInput(_ref) {
  var children = _ref.children;
  return React.createElement(InputContext.Consumer, null, function (context) {
    var _cx;

    var activeIndex = context.activeIndex,
        id = context.id,
        inputProps = context.inputProps,
        isFocused = context.isFocused,
        isMenuShown = context.isMenuShown,
        labelKey = context.labelKey,
        multiple = context.multiple,
        onFocus = context.onFocus,
        onRemove = context.onRemove,
        placeholder = context.placeholder,
        selected = context.selected,
        otherProps = _objectWithoutPropertiesLoose(context, ["activeIndex", "id", "inputProps", "isFocused", "isMenuShown", "labelKey", "multiple", "onFocus", "onRemove", "placeholder", "selected"]); // Add a11y-related props.


    var props = _extends({}, inputProps, otherProps, {
      'aria-activedescendant': activeIndex >= 0 ? getMenuItemId(id, activeIndex) : '',
      'aria-autocomplete': multiple ? 'list' : 'both',
      'aria-expanded': isMenuShown,
      'aria-haspopup': 'listbox',
      'aria-owns': isMenuShown ? id : '',
      autoComplete: inputProps.autoComplete || 'off',
      // Re-open the menu, eg: if it's closed via ESC.
      onClick: onFocus,
      onFocus: onFocus,
      placeholder: selected.length ? null : placeholder,
      // Comboboxes are single-select by definition:
      // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox
      role: 'combobox',
      type: inputProps.type || 'text'
    });

    var className = props.className || '';

    if (multiple) {
      props = _extends({}, props, {
        'aria-expanded': undefined,
        inputClassName: className,
        labelKey: labelKey,
        onRemove: onRemove,
        role: undefined,
        selected: selected
      });
    }

    props.className = cx((_cx = {}, _cx[className] = !multiple, _cx.focus = isFocused, _cx));
    return children(props);
  });
};

export default TypeaheadInput;