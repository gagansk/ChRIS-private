{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport cx from 'classnames';\nimport React from 'react';\nimport { InputContext } from './Context';\nimport { getMenuItemId } from '../utils';\n\nvar TypeaheadInput = function TypeaheadInput(_ref) {\n  var children = _ref.children;\n  return React.createElement(InputContext.Consumer, null, function (context) {\n    var _cx;\n\n    var activeIndex = context.activeIndex,\n        id = context.id,\n        inputProps = context.inputProps,\n        isFocused = context.isFocused,\n        isMenuShown = context.isMenuShown,\n        labelKey = context.labelKey,\n        multiple = context.multiple,\n        onFocus = context.onFocus,\n        onRemove = context.onRemove,\n        placeholder = context.placeholder,\n        selected = context.selected,\n        otherProps = _objectWithoutPropertiesLoose(context, [\"activeIndex\", \"id\", \"inputProps\", \"isFocused\", \"isMenuShown\", \"labelKey\", \"multiple\", \"onFocus\", \"onRemove\", \"placeholder\", \"selected\"]); // Add a11y-related props.\n\n\n    var props = _extends({}, inputProps, otherProps, {\n      'aria-activedescendant': activeIndex >= 0 ? getMenuItemId(id, activeIndex) : '',\n      'aria-autocomplete': multiple ? 'list' : 'both',\n      'aria-expanded': isMenuShown,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isMenuShown ? id : '',\n      autoComplete: inputProps.autoComplete || 'off',\n      // Re-open the menu, eg: if it's closed via ESC.\n      onClick: onFocus,\n      onFocus: onFocus,\n      placeholder: selected.length ? null : placeholder,\n      // Comboboxes are single-select by definition:\n      // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox\n      role: 'combobox',\n      type: inputProps.type || 'text'\n    });\n\n    var className = props.className || '';\n\n    if (multiple) {\n      props = _extends({}, props, {\n        'aria-expanded': undefined,\n        inputClassName: className,\n        labelKey: labelKey,\n        onRemove: onRemove,\n        role: undefined,\n        selected: selected\n      });\n    }\n\n    props.className = cx((_cx = {}, _cx[className] = !multiple, _cx.focus = isFocused, _cx));\n    return children(props);\n  });\n};\n\nexport default TypeaheadInput;","map":null,"metadata":{},"sourceType":"module"}