{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { cloneElement } from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Page/page.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { global_breakpoint_md as globalBreakpointMd } from '@patternfly/react-tokens';\nimport { debounce } from '../../helpers/util';\nexport var PageLayouts = {\n  vertical: 'vertical',\n  horizontal: 'horizontal'\n};\nvar propTypes = {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children: PropTypes.node,\n\n  /** Additional classes added to the page layout */\n  className: PropTypes.string,\n\n  /** Header component (e.g. <PageHeader />) */\n  header: PropTypes.node,\n\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar: PropTypes.node,\n\n  /** If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component */\n  isManagedSidebar: PropTypes.bool,\n\n  /** Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number } */\n  onPageResize: PropTypes.func,\n\n  /** Additional props are spread to the container <div> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: '',\n  header: null,\n  sidebar: null,\n  isManagedSidebar: false,\n  onPageResize: null\n};\n\nvar Page =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Page, _React$Component);\n\n  function Page() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Page)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      desktopIsNavOpen: true,\n      mobileIsNavOpen: false,\n      mobileView: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleResize\", function (e) {\n      var onPageResize = _this.props.onPageResize;\n      var windowSize = window.innerWidth;\n      var mobileView = windowSize < Number.parseInt(globalBreakpointMd.value, 10);\n      onPageResize && onPageResize({\n        mobileView: mobileView,\n        windowSize: windowSize\n      });\n\n      _this.setState(function (prevState) {\n        return {\n          mobileView: mobileView\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNavToggleMobile\", function () {\n      _this.setState({\n        mobileIsNavOpen: !_this.state.mobileIsNavOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNavToggleDesktop\", function () {\n      _this.setState({\n        desktopIsNavOpen: !_this.state.desktopIsNavOpen\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isManagedSidebar = _this$props.isManagedSidebar,\n          onPageResize = _this$props.onPageResize;\n\n      if (isManagedSidebar || onPageResize) {\n        window.addEventListener('resize', debounce(this.handleResize, 250)); // Initial check if should be shown\n\n        this.handleResize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          isManagedSidebar = _this$props2.isManagedSidebar,\n          onPageResize = _this$props2.onPageResize;\n      (isManagedSidebar || onPageResize) && window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          children = _this$props3.children,\n          header = _this$props3.header,\n          sidebar = _this$props3.sidebar,\n          isManagedSidebar = _this$props3.isManagedSidebar,\n          onPageResize = _this$props3.onPageResize,\n          rest = _objectWithoutProperties(_this$props3, [\"className\", \"children\", \"header\", \"sidebar\", \"isManagedSidebar\", \"onPageResize\"]);\n\n      var _this$state = this.state,\n          mobileView = _this$state.mobileView,\n          mobileIsNavOpen = _this$state.mobileIsNavOpen,\n          desktopIsNavOpen = _this$state.desktopIsNavOpen;\n      return React.createElement(\"div\", _extends({}, rest, {\n        className: css(styles.page, className)\n      }), isManagedSidebar ? cloneElement(header, {\n        onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n        isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen\n      }) : header, isManagedSidebar ? cloneElement(sidebar, {\n        isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen\n      }) : sidebar, React.createElement(\"main\", {\n        role: \"main\",\n        className: css(styles.pageMain)\n      }, children));\n    }\n  }]);\n\n  return Page;\n}(React.Component);\n\nPage.propTypes = propTypes;\nPage.defaultProps = defaultProps;\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}