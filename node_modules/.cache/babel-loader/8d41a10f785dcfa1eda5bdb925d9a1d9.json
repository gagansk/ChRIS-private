{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { StyleSheet, css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types'; // toolbar css\n\nvar toolbarCss = StyleSheet.parse(\"\\n  .pf-l-toolbar {\\n  --pf-l-toolbar__section--MarginTop: var(--pf-global--spacer--md);\\n  --pf-l-toolbar__group--MarginRight: var(--pf-global--spacer--xl);\\n  --pf-l-toolbar__group--MarginLeft: var(--pf-global--spacer--xl);\\n  --pf-l-toolbar__item--MarginRight: var(--pf-global--spacer--md);\\n  --pf-l-toolbar__item--MarginLeft: var(--pf-global--spacer--md); }\\n\\n.pf-l-toolbar,\\n.pf-l-toolbar__section,\\n.pf-l-toolbar__group {\\n  display: flex;\\n  flex-wrap: wrap;\\n  align-items: center; }\\n\\n.pf-l-toolbar__section {\\n  flex-basis: 100%; }\\n.pf-l-toolbar__section:not(:first-child) {\\n  margin-top: var(--pf-l-toolbar__section--MarginTop); }\\n\\n.pf-l-toolbar__group:not(:last-child) {\\n  margin-right: var(--pf-l-toolbar__group--MarginRight); }\\n\\n.pf-l-toolbar__item .pf-l-toolbar:not(:last-child) {\\n  margin-right: var(--pf-l-toolbar__item--MarginRight); }\\n\");\ntoolbarCss.inject();\nvar propTypes = {\n  /** Anything that can be rendered as toolbar content */\n  children: PropTypes.node,\n\n  /** Classes applied to toolbar parent */\n  className: PropTypes.string,\n\n  /** Additional props are spread to the container <div> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: null\n};\n\nvar Toolbar = function Toolbar(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n\n  return React.createElement(\"div\", _extends({}, props, {\n    className: css('pf-l-toolbar', className)\n  }), children);\n};\n\nToolbar.propTypes = propTypes;\nToolbar.defaultProps = defaultProps;\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}