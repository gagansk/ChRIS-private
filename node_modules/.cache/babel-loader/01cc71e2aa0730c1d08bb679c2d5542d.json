{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport styles from \"../../@patternfly/patternfly/components/DataList/data-list.css.js\";\n\nvar DataListCheck = function DataListCheck(_ref) {\n  var className = _ref.className,\n      _onChange = _ref.onChange,\n      isValid = _ref.isValid,\n      isDisabled = _ref.isDisabled,\n      isChecked = _ref.isChecked,\n      checked = _ref.checked,\n      props = _objectWithoutProperties(_ref, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\"]);\n\n  return React.createElement(\"div\", {\n    className: css(styles.dataListCheck, className)\n  }, React.createElement(\"input\", _extends({}, props, {\n    type: \"checkbox\",\n    onChange: function onChange(event) {\n      return _onChange(event.currentTarget.checked, event);\n    },\n    \"aria-invalid\": !isValid,\n    disabled: isDisabled,\n    checked: isChecked || checked\n  })));\n};\n\nDataListCheck.propTypes = {\n  /** Additional classes added to the DataList item checkbox */\n  className: PropTypes.string,\n\n  /** Flag to show if the DataList checkbox selection is valid or invalid */\n  isValid: PropTypes.bool,\n\n  /** Flag to show if the DataList checkbox is disabled */\n  isDisabled: PropTypes.bool,\n\n  /** Flag to show if the DataList checkbox is checked */\n  isChecked: PropTypes.bool,\n\n  /** A callback for when the DataList checkbox selection changes */\n  onChange: PropTypes.func,\n\n  /** Aria-labelledby of the DataList checkbox */\n  'aria-labelledby': PropTypes.string.isRequired,\n\n  /** Additional props are spread to the <input> */\n  '': PropTypes.any\n};\nDataListCheck.defaultProps = {\n  className: '',\n  isValid: true,\n  isDisabled: false,\n  isChecked: null,\n  onChange: function onChange() {\n    return undefined;\n  }\n};\nexport default DataListCheck;","map":null,"metadata":{},"sourceType":"module"}