{"ast":null,"code":"import React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '../../../../@patternfly/patternfly/components/Table/table.css.js';\nimport CollapseColumn from '../../CollapseColumn';\nimport ExpandableRowContent from '../../ExpandableRowContent';\nexport var collapsible = function collapsible(value, _ref) {\n  var rowIndex = _ref.rowIndex,\n      rowData = _ref.rowData,\n      _ref$column$extraPara = _ref.column.extraParams,\n      onCollapse = _ref$column$extraPara.onCollapse,\n      _ref$column$extraPara2 = _ref$column$extraPara.rowLabeledBy,\n      rowLabeledBy = _ref$column$extraPara2 === undefined ? 'simple-node' : _ref$column$extraPara2,\n      _ref$column$extraPara3 = _ref$column$extraPara.expandId,\n      expandId = _ref$column$extraPara3 === undefined ? 'expand-toggle' : _ref$column$extraPara3;\n\n  function onToggle(event) {\n    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen);\n  }\n\n  return {\n    className: css(styles.tableToggle),\n    isVisible: true,\n    children: React.createElement(CollapseColumn, {\n      'aria-labelledby': '' + rowLabeledBy + rowIndex + ' ' + expandId + rowIndex,\n      onToggle: onToggle,\n      id: expandId + rowIndex,\n      isOpen: rowData && rowData.isOpen\n    }, value)\n  };\n};\nexport var expandedRow = function expandedRow(colSpan) {\n  var expandedRowFormatter = function expandedRowFormatter(value, _ref2) {\n    var rowIndex = _ref2.rowIndex,\n        rowData = _ref2.rowData,\n        _ref2$column$extraPar = _ref2.column.extraParams.contentId,\n        contentId = _ref2$column$extraPar === undefined ? 'expanded-content' : _ref2$column$extraPar;\n    return rowData.hasOwnProperty('parent') && {\n      colSpan: colSpan,\n      children: React.createElement(ExpandableRowContent, {\n        id: contentId + rowIndex\n      }, value.title || value)\n    };\n  };\n\n  return expandedRowFormatter;\n};","map":null,"metadata":{},"sourceType":"module"}