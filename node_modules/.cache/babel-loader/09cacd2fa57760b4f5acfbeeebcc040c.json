{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport ChipButton from './ChipButton';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { TimesCircleIcon } from '@patternfly/react-icons';\nimport styles from \"../../@patternfly/patternfly/components/Chip/chip.css.js\";\nimport GenerateId from '../../helpers/GenerateId/GenerateId';\n\nvar Chip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  function Chip() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chip)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"span\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isTooltipVisible: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderOverflowChip\", function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          onClick = _this$props.onClick;\n      return React.createElement(\"div\", {\n        className: css(styles.chip, styles.modifiers.overflow, className)\n      }, React.createElement(ChipButton, {\n        onClick: onClick\n      }, React.createElement(\"span\", {\n        className: css(styles.chipText)\n      }, children)));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderChip\", function (randomId) {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          closeBtnAriaLabel = _this$props2.closeBtnAriaLabel,\n          tooltipPosition = _this$props2.tooltipPosition,\n          className = _this$props2.className,\n          onClick = _this$props2.onClick;\n\n      if (_this.state.isTooltipVisible) {\n        return React.createElement(Tooltip, {\n          position: tooltipPosition,\n          content: children\n        }, React.createElement(\"li\", {\n          className: css(styles.chip, className)\n        }, React.createElement(\"span\", {\n          ref: _this.span,\n          className: css(styles.chipText),\n          id: randomId\n        }, children), React.createElement(ChipButton, {\n          onClick: onClick,\n          ariaLabel: closeBtnAriaLabel,\n          id: \"remove_\".concat(randomId),\n          \"aria-labelledby\": \"remove_\".concat(randomId, \" \").concat(randomId)\n        }, React.createElement(TimesCircleIcon, {\n          \"aria-hidden\": \"true\"\n        }))));\n      }\n\n      return React.createElement(\"li\", {\n        className: css(styles.chip, className)\n      }, React.createElement(\"span\", {\n        ref: _this.span,\n        className: css(styles.chipText),\n        id: randomId\n      }, children), React.createElement(ChipButton, {\n        onClick: onClick,\n        ariaLabel: closeBtnAriaLabel,\n        id: \"remove_\".concat(randomId),\n        \"aria-labelledby\": \"remove_\".concat(randomId, \" \").concat(randomId)\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      })));\n    });\n\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isOverflowChip = this.props.isOverflowChip;\n      return React.createElement(GenerateId, null, function (randomId) {\n        return isOverflowChip ? _this2.renderOverflowChip() : _this2.renderChip(randomId);\n      });\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\n\nChip.propTypes = {\n  /** Content rendered inside the chip text */\n  children: PropTypes.node,\n\n  /** Aria Label for close button */\n  closeBtnAriaLabel: PropTypes.string,\n\n  /** Additional classes added to the chip item */\n  className: PropTypes.string,\n\n  /** Flag indicating if the chip has overflow */\n  isOverflowChip: PropTypes.bool,\n\n  /** Function that is called when clicking on the chip button */\n  onClick: PropTypes.func,\n\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition: PropTypes.oneOf(Object.values(TooltipPosition))\n};\nChip.defaultProps = {\n  children: null,\n  closeBtnAriaLabel: 'close',\n  className: '',\n  isOverflowChip: false,\n  tooltipPosition: 'top'\n};\nexport default Chip;","map":null,"metadata":{},"sourceType":"module"}