{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport Toggle from './Toggle';\nimport styles from \"../../@patternfly/patternfly/components/Dropdown/dropdown.css.js\";\nimport { css } from '@patternfly/react-styles';\n\nvar DropdownToggle = function DropdownToggle(_ref) {\n  var children = _ref.children,\n      IconComponent = _ref.iconComponent,\n      props = _objectWithoutProperties(_ref, [\"children\", \"iconComponent\"]);\n\n  return React.createElement(Toggle, props, React.createElement(\"span\", {\n    className: IconComponent && css(styles.dropdownToggleText)\n  }, children), IconComponent && React.createElement(IconComponent, {\n    className: css(styles.dropdownToggleIcon)\n  }));\n};\n\nDropdownToggle.propTypes = {\n  /** HTML ID of dropdown toggle */\n  id: PropTypes.string,\n\n  /** Anything which can be rendered as dropdown toggle */\n  children: PropTypes.node.isRequired,\n\n  /** Classes applied to root element of dropdown toggle */\n  className: PropTypes.string,\n\n  /** Flag to indicate if menu is opened */\n  isOpen: PropTypes.bool,\n\n  /** Callback called when toggle is clicked */\n  onToggle: PropTypes.func,\n\n  /** Element which wraps toggle */\n  parentRef: PropTypes.any,\n\n  /** Forces focus state */\n  isFocused: PropTypes.bool,\n\n  /** Forces hover state */\n  isHovered: PropTypes.bool,\n\n  /** Forces active state */\n  isActive: PropTypes.bool,\n\n  /** Display the toggle with no border or background */\n  isPlain: PropTypes.bool,\n\n  /** The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  iconComponent: PropTypes.func,\n\n  /** Additional props are spread to the container component */\n  '': PropTypes.any\n};\nDropdownToggle.defaultProps = {\n  id: '',\n  className: '',\n  isOpen: false,\n  parentRef: null,\n  isFocused: false,\n  isHovered: false,\n  isActive: false,\n  isPlain: false,\n  onToggle: Function.prototype,\n  iconComponent: CaretDownIcon\n};\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}