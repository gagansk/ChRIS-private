{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport Client from \"@fnndsc/chrisapi\";\n// Set up defaults\nvar defaultParams = {\n  limit: 10,\n  offset: 0\n};\nvar url = \"\".concat(process.env.REACT_APP_CHRIS_UI_URL);\n\nvar FeedModel =\n/*#__PURE__*/\nfunction () {\n  function FeedModel() {\n    _classCallCheck(this, FeedModel);\n  }\n\n  _createClass(FeedModel, null, [{\n    key: \"getFeed\",\n    // Description: gets Feed information\n    value: function getFeed(id) {\n      var url = \"\".concat(process.env.REACT_APP_CHRIS_UI_URL).concat(id);\n      var auth = {\n        token: window.sessionStorage.getItem(\"AUTH_TOKEN\")\n      };\n      var header = {\n        \"Content-Type\": \"application/vnd.collection+json\",\n        \"Authorization\": \"Token \" + auth.token\n      };\n      var config = {\n        headers: header,\n        method: \"get\",\n        url: url\n      };\n      return axios(config);\n    } // Use this one when using url in the data object\n    // Description: Fetch request - pass the url and gets the data from BE\n    // ***** used in plugin instances list, Plugin descendants, more...\n    // Param: url passed in with the response\n\n  }, {\n    key: \"fetchRequest\",\n    value: function fetchRequest(url) {\n      var auth = {\n        token: \"\".concat(window.sessionStorage.getItem(\"AUTH_TOKEN\"))\n      };\n      var header = {\n        \"Content-Type\": \"application/vnd.collection+json\",\n        \"Authorization\": \"Token \" + auth.token\n      };\n      var config = {\n        headers: header,\n        method: \"get\",\n        url: url\n      };\n      return axios(config); // config: AxiosRequestConfig\n    } // ------------------------------------------------------------------------\n    // Using ChrisAPI - NOTE: Pending API adjustments and TS definition\n    // ------------------------------------------------------------------------\n    // Description: gets all feeds - using API\n\n  }, {\n    key: \"getFeeds\",\n    value: function getFeeds() {\n      var auth = {\n        token: \"\".concat(window.sessionStorage.getItem(\"AUTH_TOKEN\"))\n      };\n      var client = new Client(url, auth);\n      return client.getFeeds(defaultParams);\n    } // Description: Get Plugin instance using API - will be moved to a different class\n    // static getPluginInstanceAPI(id: string) {\n    //   const url = `${process.env.REACT_APP_CHRIS_UI_URL}${id}/plugininstances/`;\n    //   const auth = { token: window.sessionStorage.getItem(\"AUTH_TOKEN\") || \"\"};\n    //   const feedlist = new FeedList(url, auth);\n    //   return feedlist.getItems();\n    // }\n\n  }]);\n\n  return FeedModel;\n}();\n\nexport { FeedModel as default };","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/api/models/feed.model.ts"],"names":["axios","Client","defaultParams","limit","offset","url","process","env","REACT_APP_CHRIS_UI_URL","FeedModel","id","auth","token","window","sessionStorage","getItem","header","config","headers","method","client","getFeeds"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,OAAOC,MAAP,MAAiD,kBAAjD;AA0BA;AACA,IAAMC,aAAsB,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,MAAM,EAAE;AAArB,CAA/B;AACA,IAAMC,GAAG,aAAMC,OAAO,CAACC,GAAR,CAAYC,sBAAlB,CAAT;;IACqBC,S;;;;;;;;;AACnB;4BACeC,E,EAAY;AACzB,UAAML,GAAG,aAAMC,OAAO,CAACC,GAAR,CAAYC,sBAAlB,SAA2CE,EAA3C,CAAT;AACA,UAAMC,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAEC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,YAA9B;AAAT,OAAb;AACA,UAAMC,MAAM,GAAG;AACb,wBAAgB,iCADH;AAEb,yBAAiB,WAAWL,IAAI,CAACC;AAFpB,OAAf;AAKA,UAAMK,MAA0B,GAAG;AACjCC,QAAAA,OAAO,EAAEF,MADwB;AAEjCG,QAAAA,MAAM,EAAE,KAFyB;AAGjCd,QAAAA,GAAG,EAAHA;AAHiC,OAAnC;AAKA,aAAOL,KAAK,CAACiB,MAAD,CAAZ;AACD,K,CAED;AACA;AACA;AACA;;;;iCACoBZ,G,EAAa;AAC9B,UAAMM,IAAI,GAAG;AAAEC,QAAAA,KAAK,YAAKC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,YAA9B,CAAL;AAAP,OAAb;AACA,UAAMC,MAAM,GAAG;AACb,wBAAgB,iCADH;AAEb,yBAAiB,WAAWL,IAAI,CAACC;AAFpB,OAAf;AAKA,UAAMK,MAA0B,GAAG;AACjCC,QAAAA,OAAO,EAAEF,MADwB;AAEjCG,QAAAA,MAAM,EAAE,KAFyB;AAGjCd,QAAAA,GAAG,EAAHA;AAHiC,OAAnC;AAKA,aAAOL,KAAK,CAACiB,MAAD,CAAZ,CAZ8B,CAYR;AACvB,K,CAEF;AACA;AACA;AACA;;;;+BACkB;AAChB,UAAMN,IAAW,GAAG;AAAEC,QAAAA,KAAK,YAAKC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,YAA9B,CAAL;AAAP,OAApB;AACA,UAAMK,MAAM,GAAG,IAAInB,MAAJ,CAAWI,GAAX,EAAgBM,IAAhB,CAAf;AACA,aAAOS,MAAM,CAACC,QAAP,CAAgBnB,aAAhB,CAAP;AACD,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;SArDmBO,S","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport Client, { FeedList, IParams, IAuth } from \"@fnndsc/chrisapi\";\nimport { ITemplate, chrisId } from \"./base.model\";\n// These will come from ClienAPI ts definition when completed\n// NOTE: ***** working typings *****\n// ------------------------------------------\nexport interface IFeedItem extends IFeedLinks {\n  id: chrisId;\n  creation_date: string;\n  modification_date: string;\n  name: string;\n  creator_username: string;\n  template?: ITemplate;\n}\n\n// Description: urls for IFeed\nexport interface IFeedLinks {\n  url: string;\n  files: string;\n  comments: string;\n  owner: string[];\n  note: string;\n  tags: string;\n  taggings: string;\n  plugin_instances: string;\n}\n\n// Set up defaults\nconst defaultParams: IParams = { limit: 10, offset: 0 };\nconst url = `${process.env.REACT_APP_CHRIS_UI_URL}`;\nexport default class FeedModel {\n  // Description: gets Feed information\n  static getFeed(id: string) {\n    const url = `${process.env.REACT_APP_CHRIS_UI_URL}${id}`;\n    const auth = { token: window.sessionStorage.getItem(\"AUTH_TOKEN\") };\n    const header = {\n      \"Content-Type\": \"application/vnd.collection+json\",\n      \"Authorization\": \"Token \" + auth.token\n    };\n\n    const config: AxiosRequestConfig = {\n      headers: header,\n      method: \"get\",\n      url\n    };\n    return axios(config);\n  }\n\n  // Use this one when using url in the data object\n  // Description: Fetch request - pass the url and gets the data from BE\n  // ***** used in plugin instances list, Plugin descendants, more...\n  // Param: url passed in with the response\n  static fetchRequest(url: string) {\n     const auth = { token: `${window.sessionStorage.getItem(\"AUTH_TOKEN\")}` };\n     const header = {\n       \"Content-Type\": \"application/vnd.collection+json\",\n       \"Authorization\": \"Token \" + auth.token\n     };\n\n     const config: AxiosRequestConfig = {\n       headers: header,\n       method: \"get\",\n       url\n     };\n     return axios(config); // config: AxiosRequestConfig\n   }\n\n  // ------------------------------------------------------------------------\n  // Using ChrisAPI - NOTE: Pending API adjustments and TS definition\n  // ------------------------------------------------------------------------\n  // Description: gets all feeds - using API\n  static getFeeds() {\n    const auth: IAuth = { token: `${window.sessionStorage.getItem(\"AUTH_TOKEN\")}` };\n    const client = new Client(url, auth);\n    return client.getFeeds(defaultParams);\n  }\n\n  // Description: Get Plugin instance using API - will be moved to a different class\n  // static getPluginInstanceAPI(id: string) {\n  //   const url = `${process.env.REACT_APP_CHRIS_UI_URL}${id}/plugininstances/`;\n  //   const auth = { token: window.sessionStorage.getItem(\"AUTH_TOKEN\") || \"\"};\n  //   const feedlist = new FeedList(url, auth);\n  //   return feedlist.getItems();\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module"}