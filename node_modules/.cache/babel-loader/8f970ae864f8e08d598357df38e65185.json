{"ast":null,"code":"import camelcase from 'camel-case';\nimport { injectGlobal, caches as emotionCache } from 'emotion';\nexport function isValidStyleDeclaration(styleObj) {\n  return Boolean(styleObj) && typeof styleObj.__className === 'string' && typeof styleObj.__inject === 'function';\n}\nexport function createStyleDeclaration(className, rawCss) {\n  return {\n    __className: className.replace('.', '').trim(),\n    __inject: function __inject() {\n      injectGlobal(rawCss);\n    }\n  };\n}\nexport function isModifier(className) {\n  return Boolean(className && className.startsWith) && className.startsWith('.pf-m-');\n}\nexport function getModifier(styleObj, modifier, defaultModifier) {\n  if (!styleObj) {\n    return null;\n  }\n\n  var modifiers = styleObj.modifiers || styleObj;\n  return modifiers[modifier] || modifiers[camelcase(modifier)] || defaultModifier;\n}\nexport function formatClassName(className) {\n  return camelcase(className.replace(/pf-((c|l|m|u|is|has)-)?/g, ''));\n}\nexport function getCSSClasses(cssString) {\n  return cssString.match(/(\\.)(?!\\d)([^\\s\\.,{\\[>+~#:)]*)(?![^{]*})/g); //eslint-disable-line\n}\nexport function getClassName() {\n  var styleObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof styleObj === 'string') {\n    return styleObj;\n  }\n\n  return isValidStyleDeclaration(styleObj) ? styleObj.__className : '';\n}\nexport function getInsertedStyles() {\n  return Object.values(emotionCache.inserted);\n}","map":null,"metadata":{},"sourceType":"module"}