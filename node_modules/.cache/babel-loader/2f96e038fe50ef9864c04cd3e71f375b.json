{"ast":null,"code":"import _toConsumableArray from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/plugin/PluginDetailPanel.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, GridItem, DataList, DataListItem, DataListToggle, DataListContent } from \"@patternfly/react-core\";\nimport PluginInformation from \"./pluginInformation\";\nimport PluginConfiguration from \"./pluginConfiguration\";\nimport PluginOutput from \"./pluginOutput\";\nimport \"./plugin.scss\";\n\nvar PluginDetailPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PluginDetailPanel, _React$Component);\n\n  function PluginDetailPanel(props) {\n    var _this;\n\n    _classCallCheck(this, PluginDetailPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PluginDetailPanel).call(this, props));\n    _this.state = {\n      expanded: [\"plugin-detail\", \"plugin-config\", \"plugin-data\"]\n    };\n    _this.handleDownloadData = _this.handleDownloadData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleViewData = _this.handleViewData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Description: Download Plugin output data ***** Working\n\n\n  _createClass(PluginDetailPanel, [{\n    key: \"handleDownloadData\",\n    value: function handleDownloadData() {\n      var files = this.props.files; // Stub - To be done\n\n      console.log(\"handleDownloadData\", files);\n    } // Description: View Plugin output data ***** Working\n\n  }, {\n    key: \"handleViewData\",\n    value: function handleViewData() {\n      var files = this.props.files; // Stub - To be done\n\n      console.log(\"handleViewData\", files);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // Note: Keep toggle of sub panels in local state\n      var toggle = function toggle(id) {\n        var expanded = _this2.state.expanded;\n        var index = expanded.indexOf(id);\n        var newExpanded = index >= 0 ? [].concat(_toConsumableArray(expanded.slice(0, index)), _toConsumableArray(expanded.slice(index + 1, expanded.length))) : [].concat(_toConsumableArray(expanded), [id]);\n\n        _this2.setState(function () {\n          return {\n            expanded: newExpanded\n          };\n        });\n      };\n\n      return this.buildContent(toggle);\n    } // Description: Build content for plugin\n\n  }, {\n    key: \"buildContent\",\n    value: function buildContent(toggle) {\n      var _this$props = this.props,\n          selected = _this$props.selected,\n          parameters = _this$props.parameters,\n          files = _this$props.files;\n      return !!selected && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"capitalize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, selected.plugin_name), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        className: \"plugin-details\",\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(DataList, {\n        \"aria-label\": \"Plugin Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(DataListItem, {\n        \"aria-labelledby\": \"Plugin Description\",\n        isExpanded: this.state.expanded.includes(\"plugin-detail\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"datalist-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"capitalize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, selected.plugin_name), React.createElement(DataListToggle, {\n        onClick: function onClick() {\n          return toggle(\"plugin-detail\");\n        },\n        isExpanded: this.state.expanded.includes(\"plugin-detail\"),\n        id: \"plugin-detail\",\n        \"aria-labelledby\": \"Plugin Description\",\n        \"aria-label\": \"Toggle details for Plugin Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(DataListContent, {\n        \"aria-label\": \"Primary Content Details for plugin\",\n        isHidden: !this.state.expanded.includes(\"plugin-detail\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(PluginInformation, {\n        selected: selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }))))), React.createElement(GridItem, {\n        className: \"plugin-config\",\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(DataList, {\n        \"aria-label\": \"Plugin Configuration\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(DataListItem, {\n        \"aria-labelledby\": \"Plugin Configuration\",\n        isExpanded: this.state.expanded.includes(\"plugin-config\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"datalist-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Configuration\", React.createElement(DataListToggle, {\n        onClick: function onClick() {\n          return toggle(\"plugin-config\");\n        },\n        isExpanded: this.state.expanded.includes(\"plugin-config\"),\n        id: \"plugin-config\",\n        \"aria-labelledby\": \"Plugin Configuration\",\n        \"aria-label\": \"Toggle details for Plugin Configuration\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(DataListContent, {\n        \"aria-label\": \"Plugin Configuration\",\n        isHidden: !this.state.expanded.includes(\"plugin-config\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, !!parameters && React.createElement(PluginConfiguration, {\n        parameters: parameters,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }))))), React.createElement(GridItem, {\n        className: \"plugin-output\",\n        sm: 12,\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(DataList, {\n        \"aria-label\": \"Plugin Output\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(DataListItem, {\n        \"aria-labelledby\": \"ex-item1\",\n        isExpanded: this.state.expanded.includes(\"plugin-data\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"datalist-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Output\", React.createElement(DataListToggle, {\n        onClick: function onClick() {\n          return toggle(\"plugin-data\");\n        },\n        isExpanded: this.state.expanded.includes(\"plugin-data\"),\n        id: \"plugin-data\",\n        \"aria-labelledby\": \"Plugin Output\",\n        \"aria-label\": \"Toggle details for Plugin Output\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(DataListContent, {\n        \"aria-label\": \"Plugin Output\",\n        isHidden: !this.state.expanded.includes(\"plugin-data\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, !!files && React.createElement(PluginOutput, {\n        files: files,\n        handleDownloadData: this.handleDownloadData,\n        handleViewData: this.handleViewData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return PluginDetailPanel;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var plugin = _ref.plugin;\n  return {\n    selected: plugin.selected,\n    files: plugin.files,\n    parameters: plugin.parameters\n  };\n};\n\nexport default connect(mapStateToProps, null)(PluginDetailPanel);","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/plugin/PluginDetailPanel.tsx"],"names":["React","connect","Grid","GridItem","DataList","DataListItem","DataListToggle","DataListContent","PluginInformation","PluginConfiguration","PluginOutput","PluginDetailPanel","props","state","expanded","handleDownloadData","bind","handleViewData","files","console","log","toggle","id","index","indexOf","newExpanded","slice","length","setState","buildContent","selected","parameters","plugin_name","includes","Component","mapStateToProps","plugin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Grid,\n  GridItem,\n  DataList,\n  DataListItem,\n  DataListToggle,\n  DataListContent\n} from \"@patternfly/react-core\";\nimport { ApplicationState } from \"../../store/root/applicationState\";\nimport { IPluginState } from \"../../store/plugin/types\";\nimport PluginInformation from \"./pluginInformation\";\nimport PluginConfiguration from \"./pluginConfiguration\";\nimport PluginOutput from \"./pluginOutput\";\nimport \"./plugin.scss\";\n\ninterface IState {\n  expanded: string[];\n}\n\nclass PluginDetailPanel extends React.Component<IPluginState, IState> {\n  constructor(props: IPluginState) {\n    super(props);\n    this.state = {\n      expanded: [\"plugin-detail\", \"plugin-config\", \"plugin-data\"]\n    };\n    this.handleDownloadData = this.handleDownloadData.bind(this);\n    this.handleViewData = this.handleViewData.bind(this);\n  }\n\n  // Description: Download Plugin output data ***** Working\n  handleDownloadData() {\n    const { files } = this.props;\n    // Stub - To be done\n    console.log(\"handleDownloadData\", files);\n  }\n\n  // Description: View Plugin output data ***** Working\n  handleViewData() {\n    const { files } = this.props;\n    // Stub - To be done\n    console.log(\"handleViewData\", files);\n  }\n\n  render() {\n    // Note: Keep toggle of sub panels in local state\n    const toggle = (id: string) => {\n      const expanded = this.state.expanded;\n      const index = expanded.indexOf(id);\n      const newExpanded =\n        index >= 0\n          ? [\n              ...expanded.slice(0, index),\n              ...expanded.slice(index + 1, expanded.length)\n            ]\n          : [...expanded, id];\n      this.setState(() => ({ expanded: newExpanded }));\n    };\n    return this.buildContent(toggle);\n  }\n  // Description: Build content for plugin\n  private buildContent(toggle: (id: string) => void) {\n    const { selected, parameters, files } = this.props;\n    return (\n      !!selected && (\n        <React.Fragment>\n          <h1 className=\"capitalize\">{selected.plugin_name}</h1>\n          <Grid>\n            <GridItem className=\"plugin-details\" sm={12} md={4}>\n              <DataList aria-label=\"Plugin Description\">\n                <DataListItem\n                  aria-labelledby=\"Plugin Description\"\n                  isExpanded={this.state.expanded.includes(\"plugin-detail\")}\n                >\n                  <div className=\"datalist-header\">\n                    <span className=\"capitalize\">{selected.plugin_name}</span>\n                    <DataListToggle\n                      onClick={() => toggle(\"plugin-detail\")}\n                      isExpanded={this.state.expanded.includes(\"plugin-detail\")}\n                      id=\"plugin-detail\"\n                      aria-labelledby=\"Plugin Description\"\n                      aria-label=\"Toggle details for Plugin Description\"\n                    />\n                  </div>\n                  <DataListContent\n                    aria-label=\"Primary Content Details for plugin\"\n                    isHidden={!this.state.expanded.includes(\"plugin-detail\")}\n                  >\n                    <PluginInformation selected={selected} />\n                  </DataListContent>\n                </DataListItem>\n              </DataList>\n            </GridItem>\n            <GridItem className=\"plugin-config\" sm={12} md={4}>\n              <DataList aria-label=\"Plugin Configuration\">\n                <DataListItem\n                  aria-labelledby=\"Plugin Configuration\"\n                  isExpanded={this.state.expanded.includes(\"plugin-config\")}\n                >\n                  <div className=\"datalist-header\">\n                    Configuration\n                    <DataListToggle\n                      onClick={() => toggle(\"plugin-config\")}\n                      isExpanded={this.state.expanded.includes(\"plugin-config\")}\n                      id=\"plugin-config\"\n                      aria-labelledby=\"Plugin Configuration\"\n                      aria-label=\"Toggle details for Plugin Configuration\"\n                    />\n                  </div>\n                  <DataListContent\n                    aria-label=\"Plugin Configuration\"\n                    isHidden={!this.state.expanded.includes(\"plugin-config\")}\n                  >\n                    {!!parameters && (\n                      <PluginConfiguration parameters={parameters} />\n                    )}\n                  </DataListContent>\n                </DataListItem>\n              </DataList>\n            </GridItem>\n            <GridItem className=\"plugin-output\" sm={12} md={4}>\n              <DataList aria-label=\"Plugin Output\">\n                <DataListItem\n                  aria-labelledby=\"ex-item1\"\n                  isExpanded={this.state.expanded.includes(\"plugin-data\")}\n                >\n                  <div className=\"datalist-header\">\n                    Output\n                    <DataListToggle\n                      onClick={() => toggle(\"plugin-data\")}\n                      isExpanded={this.state.expanded.includes(\"plugin-data\")}\n                      id=\"plugin-data\"\n                      aria-labelledby=\"Plugin Output\"\n                      aria-label=\"Toggle details for Plugin Output\"\n                    />\n                  </div>\n                  <DataListContent\n                    aria-label=\"Plugin Output\"\n                    isHidden={!this.state.expanded.includes(\"plugin-data\")}\n                  >\n                    {!!files && (\n                      <PluginOutput\n                        files={files}\n                        handleDownloadData={this.handleDownloadData}\n                        handleViewData={this.handleViewData}\n                      />\n                    )}\n                  </DataListContent>\n                </DataListItem>\n              </DataList>\n            </GridItem>\n          </Grid>\n        </React.Fragment>\n      )\n    );\n  }\n}\n\nconst mapStateToProps = ({ plugin }: ApplicationState) => ({\n  selected: plugin.selected,\n  files: plugin.files,\n  parameters: plugin.parameters\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PluginDetailPanel);\n"]},"metadata":{},"sourceType":"module"}