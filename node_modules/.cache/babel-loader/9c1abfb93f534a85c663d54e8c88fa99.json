{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/chart/VolumeGrowth.tsx\";\nimport * as React from \"react\";\nimport * as c3 from \"c3\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"./chart.scss\";\n\n/* Age Vs Volume data for the graph*/\nvar chartData = [[\"age\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [\"GOrbitalAverage\", 90, 103, 110, 113, 117, 122, 127, 129, 130, 133, 140, 145, 145, 145, 146, 146, 144, 142], [\"GOrbitalPatient\", null, null, 120, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [\"SCentralAverage\", 190, 196, 208, 213, 217, 222, 225, 227, 230, 231, 237, 237, 237, 237, 237, 234, 234, 232], [\"SCentralPatient\", null, null, 190, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [\"STemporalInfAverage\", 280, 294, 318, 320, 320, 321, 323, 325, 326, 329, 333, 334, 334, 337, 337, 337, 337, 337], [\"STemporalInfPatient\", null, null, 329, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]];\nvar defaultChartData = [[\"age\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [\"GOrbitalAverage\", 100, 105, 110, 113, 117, 122, 127, 129, 130, 133, 140, 145, 145, 145, 146, 146, 144, 142], [\"GOrbitalPatient\", null, null, 120, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]];\nvar defaultSegments = [\"GOrbital\"];\nvar allSegments = [\"GOrbital\", \"SCentral\", \"STemporalInf\"];\nvar xAxis = [\"age\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n\nvar VolumeGrowth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VolumeGrowth, _React$Component);\n\n  function VolumeGrowth(props) {\n    var _this;\n\n    _classCallCheck(this, VolumeGrowth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VolumeGrowth).call(this, props));\n    _this.state = {\n      pushedSegments: []\n    };\n    _this.changeData = _this.changeData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VolumeGrowth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.callChart(defaultChartData);\n    }\n  }, {\n    key: \"callChart\",\n    value: function callChart(inputChart) {\n      c3.generate({\n        bindto: \"#VolumeGrowth\",\n        data: {\n          x: \"age\",\n          columns: inputChart,\n          type: \"spline\",\n          colors: {\n            GOrbitalAverage: \"#FFA500\",\n            GOrbitalPatient: \"#FFA500\",\n            SCentralAverage: \"#00BFFF\",\n            SCentralPatient: \"#00BFFF\",\n            STemporalInfAverage: \"#12E73B\",\n            STemporalInfPatient: \"#12E73B\"\n          }\n        },\n        padding: {\n          top: 40,\n          bottom: 20,\n          right: 30\n        },\n        axis: {\n          x: {\n            label: {\n              text: \"Age in Months\",\n              position: \"outer-center\"\n            }\n          },\n          y: {\n            label: {\n              text: \"Size in cm3\",\n              position: \"outer-middle\"\n            }\n          }\n        },\n        tooltip: {\n          format: {\n            title: function title(d) {\n              return d + \" Months old\";\n            }\n          }\n        },\n        size: {\n          height: 500 // **** Working find the element and resize to modal\n\n        }\n      });\n    }\n  }, {\n    key: \"getSegmentData\",\n    value: function getSegmentData(segment) {\n      var segmentData = chartData.find(function (segmentData) {\n        return segmentData[0] === segment;\n      });\n      return segmentData;\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter() {\n      var _this2 = this;\n\n      var filteredData = []; // Get the Patient data for the segment\n\n      if (this.state.pushedSegments.length > 0) {\n        filteredData = this.state.pushedSegments.map(function (segment) {\n          return _this2.getSegmentData(segment + \"Patient\");\n        });\n      } // Get the Average data for the segment\n\n\n      if (this.state.pushedSegments.length > 0) {\n        filteredData = filteredData.concat(this.state.pushedSegments.map(function (segment) {\n          return _this2.getSegmentData(segment + \"Average\");\n        }));\n      }\n\n      filteredData.push(xAxis);\n      return filteredData;\n    }\n  }, {\n    key: \"changeData\",\n    value: function changeData(selectedSegments) {\n      var _this3 = this;\n\n      // Call back function to avoid asynchronous setState\n      var processedData;\n      this.setState({\n        pushedSegments: selectedSegments\n      }, function () {\n        // Input processing\n        processedData = _this3.setFilter();\n\n        _this3.callChart(processedData);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"chart-viewer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(Typeahead, {\n        clearButton: true,\n        defaultSelected: defaultSegments,\n        id: \"selector\",\n        multiple: true,\n        options: allSegments,\n        placeholder: \"Choose a brain segment...\",\n        onChange: function onChange(selectedSegments) {\n          return _this4.changeData(selectedSegments);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"VolumeGrowth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VolumeGrowth;\n}(React.Component);\n\nexport default VolumeGrowth;","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/chart/VolumeGrowth.tsx"],"names":["React","c3","Typeahead","chartData","defaultChartData","defaultSegments","allSegments","xAxis","VolumeGrowth","props","state","pushedSegments","changeData","bind","callChart","inputChart","generate","bindto","data","x","columns","type","colors","GOrbitalAverage","GOrbitalPatient","SCentralAverage","SCentralPatient","STemporalInfAverage","STemporalInfPatient","padding","top","bottom","right","axis","label","text","position","y","tooltip","format","title","d","size","height","segment","segmentData","find","filteredData","length","map","getSegmentData","concat","push","selectedSegments","processedData","setState","setFilter","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as c3 from \"c3\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"./chart.scss\";\ninterface ComponentProps {\n}\n\ninterface ComponentState {\n  pushedSegments: [];\n}\n\n/* Age Vs Volume data for the graph*/\nconst chartData = [\n  [\"age\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n  [\n    \"GOrbitalAverage\",\n    90,\n    103,\n    110,\n    113,\n    117,\n    122,\n    127,\n    129,\n    130,\n    133,\n    140,\n    145,\n    145,\n    145,\n    146,\n    146,\n    144,\n    142\n  ],\n  [\n    \"GOrbitalPatient\",\n    null,\n    null,\n    120,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null\n  ],\n  [\n    \"SCentralAverage\",\n    190,\n    196,\n    208,\n    213,\n    217,\n    222,\n    225,\n    227,\n    230,\n    231,\n    237,\n    237,\n    237,\n    237,\n    237,\n    234,\n    234,\n    232\n  ],\n  [\n    \"SCentralPatient\",\n    null,\n    null,\n    190,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null\n  ],\n  [\n    \"STemporalInfAverage\",\n    280,\n    294,\n    318,\n    320,\n    320,\n    321,\n    323,\n    325,\n    326,\n    329,\n    333,\n    334,\n    334,\n    337,\n    337,\n    337,\n    337,\n    337\n  ],\n  [\n    \"STemporalInfPatient\",\n    null,\n    null,\n    329,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null\n  ]\n];\n\nconst defaultChartData = [\n  [\"age\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n  [\n    \"GOrbitalAverage\",\n    100,\n    105,\n    110,\n    113,\n    117,\n    122,\n    127,\n    129,\n    130,\n    133,\n    140,\n    145,\n    145,\n    145,\n    146,\n    146,\n    144,\n    142\n  ],\n  [\n    \"GOrbitalPatient\",\n    null,\n    null,\n    120,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null\n  ]\n];\n\nconst defaultSegments = [\"GOrbital\"];\nconst allSegments = [\"GOrbital\", \"SCentral\", \"STemporalInf\"];\n\nconst xAxis = [\n  \"age\",\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18\n];\n\nclass VolumeGrowth extends React.Component<ComponentProps, ComponentState> {\n  constructor(props: ComponentProps) {\n    super(props);\n    this.state = {\n      pushedSegments: []\n    };\n\n    this.changeData = this.changeData.bind(this);\n  }\n\n  componentDidMount() {\n    this.callChart(defaultChartData);\n  }\n\n  callChart(inputChart: any) {\n    c3.generate({\n      bindto: \"#VolumeGrowth\",\n      data: {\n        x: \"age\",\n        columns: inputChart,\n        type: \"spline\",\n        colors: {\n          GOrbitalAverage: \"#FFA500\",\n          GOrbitalPatient: \"#FFA500\",\n          SCentralAverage: \"#00BFFF\",\n          SCentralPatient: \"#00BFFF\",\n          STemporalInfAverage: \"#12E73B\",\n          STemporalInfPatient: \"#12E73B\"\n        }\n      },\n      padding: {\n        top: 40,\n        bottom: 20,\n        right: 30\n      },\n      axis: {\n        x: {\n          label: {\n            text: \"Age in Months\",\n            position: \"outer-center\"\n          }\n        },\n        y: {\n          label: {\n            text: \"Size in cm3\",\n            position: \"outer-middle\"\n          }\n        }\n      },\n      tooltip: {\n        format: {\n          title(d) {\n            return d + \" Months old\";\n          }\n        }\n      },\n      size: {\n        height: 500 // **** Working find the element and resize to modal\n      }\n    });\n  }\n\n  getSegmentData(segment: string) {\n    const segmentData = chartData.find(segmentData => {\n      return segmentData[0] === segment;\n    });\n    return segmentData;\n  }\n\n  setFilter() {\n    let filteredData: any[] = [];\n    // Get the Patient data for the segment\n    if (this.state.pushedSegments.length > 0) {\n      filteredData = this.state.pushedSegments.map(segment =>\n        this.getSegmentData(segment + \"Patient\")\n      );\n    }\n    // Get the Average data for the segment\n    if (this.state.pushedSegments.length > 0) {\n      filteredData = filteredData.concat(\n        this.state.pushedSegments.map(segment =>\n          this.getSegmentData(segment + \"Average\")\n        )\n      );\n    }\n    filteredData.push(xAxis);\n    return filteredData;\n  }\n\n  changeData(selectedSegments: any) {\n    // Call back function to avoid asynchronous setState\n    let processedData;\n    this.setState(\n      {\n        pushedSegments: selectedSegments\n      },\n      () => {\n        // Input processing\n        processedData = this.setFilter();\n        this.callChart(processedData);\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"chart-viewer\">\n        <React.Fragment>\n          <Typeahead\n            clearButton\n            defaultSelected={defaultSegments}\n            id=\"selector\"\n            multiple\n            options={allSegments}\n            placeholder=\"Choose a brain segment...\"\n            onChange={selectedSegments => this.changeData(selectedSegments)}\n          />\n        </React.Fragment>\n        <div id=\"VolumeGrowth\" />\n      </div>\n    );\n  }\n}\n\nexport default VolumeGrowth;\n"]},"metadata":{},"sourceType":"module"}