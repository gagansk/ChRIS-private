{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Nav/nav.css.js\";\nimport a11yStyles from \"../../@patternfly/patternfly/utilities/Accessibility/accessibility.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport NavToggle from './NavToggle';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport { NavContext } from './Nav';\nimport { getUniqueId } from '../../helpers/util';\nvar propTypes = {\n  /** Title shown for the expandable list */\n  title: PropTypes.string.isRequired,\n\n  /** If defined, screen readers will read this text instead of the list title */\n  srText: PropTypes.string,\n\n  /** Boolean to programatically expand or collapse section */\n  isExpanded: PropTypes.bool,\n\n  /** Anything that can be rendered inside of the expandable list */\n  children: PropTypes.node,\n\n  /** Additional classes added to the container */\n  className: PropTypes.string,\n\n  /** Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  groupId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** If true makes the expandable list title active */\n  isActive: PropTypes.bool,\n\n  /** Identifier to use for the section aria label */\n  id: PropTypes.string,\n\n  /** Additional props are spread to the container <li> */\n  '': PropTypes.any,\n\n  /** allow consumer to optionally override this callback and manage expand state externally */\n  onExpand: PropTypes.func\n};\nvar defaultProps = {\n  srText: '',\n  isExpanded: false,\n  children: null,\n  className: '',\n  groupId: null,\n  isActive: false,\n  id: '',\n  onExpand: undefined\n};\n\nvar NavExpandable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NavExpandable, _React$Component);\n\n  function NavExpandable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NavExpandable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavExpandable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"id\", _this.props.id || getUniqueId());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      expandedState: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onExpand\", function (e, val) {\n      if (_this.props.onExpand) {\n        _this.props.onExpand(e, val);\n      } else {\n        _this.setState({\n          expandedState: val\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(NavExpandable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        expandedState: this.props.isExpanded\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isExpanded !== prevProps.isExpanded) {\n        this.setState({\n          expandedState: this.props.isExpanded\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          id = _this$props.id,\n          title = _this$props.title,\n          srText = _this$props.srText,\n          isExpanded = _this$props.isExpanded,\n          children = _this$props.children,\n          className = _this$props.className,\n          groupId = _this$props.groupId,\n          isActive = _this$props.isActive,\n          onExpand = _this$props.onExpand,\n          props = _objectWithoutProperties(_this$props, [\"id\", \"title\", \"srText\", \"isExpanded\", \"children\", \"className\", \"groupId\", \"isActive\", \"onExpand\"]);\n\n      var expandedState = this.state.expandedState;\n      return React.createElement(NavContext.Consumer, null, function (context) {\n        return React.createElement(NavToggle, {\n          groupId: groupId,\n          onToggle: context.onToggle,\n          onExpand: _this2.onExpand,\n          isExpanded: expandedState\n        }, function (_ref) {\n          var toggleValue = _ref.toggleValue,\n              toggle = _ref.toggle;\n          return React.createElement(\"li\", _extends({\n            className: css(styles.navItem, toggleValue && styles.modifiers.expanded, isActive && styles.modifiers.current, className),\n            onClick: toggle\n          }, props), React.createElement(\"a\", {\n            \"data-component\": \"pf-nav-expandable\",\n            className: css(styles.navLink),\n            id: srText ? null : _this2.id,\n            href: \"#\",\n            onClick: function onClick(e) {\n              return e.preventDefault();\n            },\n            onMouseDown: function onMouseDown(e) {\n              return e.preventDefault();\n            },\n            \"aria-expanded\": toggleValue\n          }, title, React.createElement(\"span\", {\n            className: css(styles.navToggle)\n          }, React.createElement(AngleRightIcon, {\n            \"aria-hidden\": \"true\"\n          }))), React.createElement(\"section\", {\n            className: css(styles.navSubnav),\n            \"aria-labelledby\": _this2.id,\n            hidden: toggleValue ? null : true\n          }, srText && React.createElement(\"h2\", {\n            className: css(a11yStyles.screenReader),\n            id: _this2.id\n          }, srText), React.createElement(\"ul\", {\n            className: css(styles.navSimpleList)\n          }, children)));\n        });\n      });\n    }\n  }]);\n\n  return NavExpandable;\n}(React.Component);\n\nNavExpandable.propTypes = propTypes;\nNavExpandable.defaultProps = defaultProps;\nNavExpandable.componentType = 'NavExpandable';\nexport default NavExpandable;","map":null,"metadata":{},"sourceType":"module"}