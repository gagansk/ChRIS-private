{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport styles from \"../../@patternfly/patternfly/components/FormControl/form-control.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nvar inputTypes = ['text', 'date', 'datetime-local', 'email', 'month', 'number', 'password', 'search', 'tel', 'time', 'url'];\nvar propTypes = {\n  /** Additional classes added to the TextInput. */\n  className: PropTypes.string,\n\n  /** Flag to show if the input is required. */\n  isRequired: PropTypes.bool,\n\n  /** Type that the input accepts. */\n  type: PropTypes.oneOf(inputTypes),\n\n  /** Value of the input. */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Flag to show if the input is valid or invalid. */\n  isValid: PropTypes.bool,\n\n  /** Flag to show if the input is disabled. */\n  isDisabled: PropTypes.bool,\n\n  /** A callback for when the input value changes. */\n  onChange: PropTypes.func,\n\n  /** Flag to show if the input is read only. */\n  isReadOnly: PropTypes.bool,\n\n  /** Custom flag to show that the input requires an associated id or aria-label. */\n  'aria-label': function ariaLabel(props) {\n    if (!props.id && !props['aria-label']) {\n      return new Error('TextInput requires either an id or aria-label to be specified');\n    }\n\n    return null;\n  },\n\n  /** Additional props are spread to the container <input> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  className: '',\n  isRequired: false,\n  isValid: true,\n  isDisabled: false,\n  isReadOnly: false,\n  type: 'text',\n  value: null,\n  onChange: function onChange() {\n    return undefined;\n  },\n  'aria-label': null\n};\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TextInput, _React$Component);\n\n  function TextInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChange\", function (event) {\n      _this.props.onChange(event.currentTarget.value, event);\n    });\n\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          type = _this$props.type,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          isValid = _this$props.isValid,\n          isReadOnly = _this$props.isReadOnly,\n          isRequired = _this$props.isRequired,\n          isDisabled = _this$props.isDisabled,\n          props = _objectWithoutProperties(_this$props, [\"className\", \"type\", \"value\", \"onChange\", \"isValid\", \"isReadOnly\", \"isRequired\", \"isDisabled\"]);\n\n      return React.createElement(\"input\", _extends({}, props, {\n        className: css(styles.formControl, className),\n        onChange: this.handleChange,\n        type: type,\n        value: value,\n        \"aria-invalid\": !isValid,\n        required: isRequired,\n        disabled: isDisabled,\n        readOnly: isReadOnly\n      }));\n    }\n  }]);\n\n  return TextInput;\n}(React.Component);\n\nTextInput.propTypes = propTypes;\nTextInput.defaultProps = defaultProps;\nexport default TextInput;","map":null,"metadata":{},"sourceType":"module"}