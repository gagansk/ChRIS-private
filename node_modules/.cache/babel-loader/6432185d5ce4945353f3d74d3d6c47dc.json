{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetPluginDetails),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPluginDetails),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetPluginDescendants),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPluginDescendants),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetPluginFiles),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPluginFiles),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetPluginParameters),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPluginParameters),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(pluginSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { PluginActionTypes } from \"./types\";\nimport FeedModel from \"../../api/models/feed.model\";\nimport { getPluginDetailsSuccess, getPluginDescendantsSuccess, getPluginFilesSuccess, getPluginParametersSuccess, getPluginFilesRequest, setExplorerSuccess, getPluginParametersRequest } from \"./actions\";\n\n// ------------------------------------------------------------------------\n// Description: Get Plugin Descendants, files and parameters on change\n// ------------------------------------------------------------------------\nfunction handleGetPluginDetails(action) {\n  var item, res;\n  return _regeneratorRuntime.wrap(function handleGetPluginDetails$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          item = action.payload;\n          _context.next = 4;\n          return call(FeedModel.fetchRequest, item.descendants);\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.error) {\n            _context.next = 9;\n            break;\n          }\n\n          console.error(res.error); // working user messaging\n\n          _context.next = 19;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put(getPluginDetailsSuccess(res));\n\n        case 11:\n          _context.t0 = !!item.files;\n\n          if (!_context.t0) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 15;\n          return put(getPluginFilesRequest(item));\n\n        case 15:\n          _context.t1 = !!item.parameters;\n\n          if (!_context.t1) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 19;\n          return put(getPluginParametersRequest(item.parameters));\n\n        case 19:\n          _context.next = 24;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t2 = _context[\"catch\"](0);\n          console.error(_context.t2); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 21]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetPluginDetails() {\n  return _regeneratorRuntime.wrap(function watchGetPluginDetails$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(PluginActionTypes.GET_PLUGIN_DETAILS, handleGetPluginDetails);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // ------------------------------------------------------------------------\n// Description: Get Plugin Descendants\n// ------------------------------------------------------------------------\n\n\nfunction handleGetPluginDescendants(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function handleGetPluginDescendants$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(FeedModel.fetchRequest, action.payload);\n\n        case 3:\n          res = _context3.sent;\n\n          if (!res.error) {\n            _context3.next = 8;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context3.next = 10;\n          break;\n\n        case 8:\n          _context3.next = 10;\n          return put(getPluginDescendantsSuccess(res));\n\n        case 10:\n          _context3.next = 15;\n          break;\n\n        case 12:\n          _context3.prev = 12;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 12]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetPluginDescendants() {\n  return _regeneratorRuntime.wrap(function watchGetPluginDescendants$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(PluginActionTypes.GET_PLUGIN_DESCENDANTS, handleGetPluginDescendants);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // ------------------------------------------------------------------------\n// Description: Get Plugin Details: Parameters, files and others\n// @Param: action.payload === selected plugin\n// ------------------------------------------------------------------------\n\n\nfunction handleGetPluginFiles(action) {\n  var selected, res;\n  return _regeneratorRuntime.wrap(function handleGetPluginFiles$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          selected = action.payload;\n          _context5.next = 4;\n          return call(FeedModel.fetchRequest, selected.files);\n\n        case 4:\n          res = _context5.sent;\n\n          if (!res.error) {\n            _context5.next = 9;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.next = 11;\n          return put(getPluginFilesSuccess(res));\n\n        case 11:\n          _context5.next = 13;\n          return put(setExplorerSuccess(res.data.results, selected));\n\n        case 13:\n          _context5.next = 18;\n          break;\n\n        case 15:\n          _context5.prev = 15;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 18:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 15]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetPluginFiles() {\n  return _regeneratorRuntime.wrap(function watchGetPluginFiles$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(PluginActionTypes.GET_PLUGIN_FILES, handleGetPluginFiles);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // ------------------------------------------------------------------------\n// Description: Get Plugin Details: Parameters, files and others\n// ------------------------------------------------------------------------\n\n\nfunction handleGetPluginParameters(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function handleGetPluginParameters$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(FeedModel.fetchRequest, action.payload);\n\n        case 3:\n          res = _context7.sent;\n\n          if (!res.error) {\n            _context7.next = 8;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context7.next = 10;\n          break;\n\n        case 8:\n          _context7.next = 10;\n          return put(getPluginParametersSuccess(res));\n\n        case 10:\n          _context7.next = 15;\n          break;\n\n        case 12:\n          _context7.prev = 12;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 12]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetPluginParameters() {\n  return _regeneratorRuntime.wrap(function watchGetPluginParameters$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(PluginActionTypes.GET_PLUGIN_PARAMETERS, handleGetPluginParameters);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} // ------------------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\n\n\nexport function pluginSaga() {\n  return _regeneratorRuntime.wrap(function pluginSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchGetPluginDetails), fork(watchGetPluginDescendants), fork(watchGetPluginFiles), fork(watchGetPluginParameters)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/store/plugin/saga.ts"],"names":["handleGetPluginDetails","watchGetPluginDetails","handleGetPluginDescendants","watchGetPluginDescendants","handleGetPluginFiles","watchGetPluginFiles","handleGetPluginParameters","watchGetPluginParameters","pluginSaga","all","call","fork","put","takeEvery","PluginActionTypes","FeedModel","getPluginDetailsSuccess","getPluginDescendantsSuccess","getPluginFilesSuccess","getPluginParametersSuccess","getPluginFilesRequest","setExplorerSuccess","getPluginParametersRequest","action","item","payload","fetchRequest","descendants","res","error","console","files","parameters","GET_PLUGIN_DETAILS","GET_PLUGIN_DESCENDANTS","selected","data","results","GET_PLUGIN_FILES","GET_PLUGIN_PARAMETERS"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { PluginActionTypes } from \"./types\";\nimport FeedModel from \"../../api/models/feed.model\";\nimport {\n  getPluginDetailsSuccess,\n  getPluginDescendantsSuccess,\n  getPluginFilesSuccess,\n  getPluginParametersSuccess,\n  getPluginFilesRequest,\n  setExplorerSuccess,\n  getPluginParametersRequest\n} from \"./actions\";\nimport { IPluginItem } from \"../../api/models/pluginInstance.model\";\n\n// ------------------------------------------------------------------------\n// Description: Get Plugin Descendants, files and parameters on change\n// ------------------------------------------------------------------------\nfunction* handleGetPluginDetails(action: any) {\n  try {\n    const item: IPluginItem = action.payload;\n    const res = yield call(FeedModel.fetchRequest, item.descendants); // Get descendants first:\n    if (res.error) {\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getPluginDetailsSuccess(res));\n      !!item.files && (yield put(getPluginFilesRequest(item)));\n      !!item.parameters && (yield put(getPluginParametersRequest(item.parameters)));\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetPluginDetails() {\n  yield takeEvery(PluginActionTypes.GET_PLUGIN_DETAILS, handleGetPluginDetails);\n}\n\n// ------------------------------------------------------------------------\n// Description: Get Plugin Descendants\n// ------------------------------------------------------------------------\nfunction* handleGetPluginDescendants(action: any) {\n  try {\n    const res = yield call(FeedModel.fetchRequest, action.payload);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getPluginDescendantsSuccess(res));\n      // yield put(managerOnCompleteRequest()); // nO need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetPluginDescendants() {\n  yield takeEvery(\n    PluginActionTypes.GET_PLUGIN_DESCENDANTS,\n    handleGetPluginDescendants\n  );\n}\n\n// ------------------------------------------------------------------------\n// Description: Get Plugin Details: Parameters, files and others\n// @Param: action.payload === selected plugin\n// ------------------------------------------------------------------------\nfunction* handleGetPluginFiles(action: any) {\n  try {\n    const selected = action.payload;\n    const res = yield call(FeedModel.fetchRequest, selected.files);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getPluginFilesSuccess(res));\n      yield put(setExplorerSuccess(res.data.results, selected)); // Structure the files for explorer\n      // yield put(managerOnCompleteRequest()); // nO need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetPluginFiles() {\n  yield takeEvery(PluginActionTypes.GET_PLUGIN_FILES, handleGetPluginFiles);\n}\n// ------------------------------------------------------------------------\n// Description: Get Plugin Details: Parameters, files and others\n// ------------------------------------------------------------------------\nfunction* handleGetPluginParameters(action: any) {\n  try {\n    const res = yield call(FeedModel.fetchRequest, action.payload);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getPluginParametersSuccess(res));\n      // yield put(managerOnCompleteRequest()); // nO need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetPluginParameters() {\n  yield takeEvery(\n    PluginActionTypes.GET_PLUGIN_PARAMETERS,\n    handleGetPluginParameters\n  );\n}\n\n// ------------------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* pluginSaga() {\n  yield all([\n    fork(watchGetPluginDetails),\n    fork(watchGetPluginDescendants),\n    fork(watchGetPluginFiles),\n    fork(watchGetPluginParameters)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}