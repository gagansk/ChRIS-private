{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport { withContext } from '../core/Context';\nimport { getDisplayName, shouldSelectHint } from '../utils'; // IE doesn't seem to get the composite computed value (eg: 'padding',\n// 'borderStyle', etc.), so generate these from the individual values.\n\nfunction interpolateStyle(styles, attr, subattr) {\n  if (subattr === void 0) {\n    subattr = '';\n  } // Title-case the sub-attribute.\n\n\n  if (subattr) {\n    /* eslint-disable-next-line no-param-reassign */\n    subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());\n  }\n\n  return ['Top', 'Right', 'Bottom', 'Left'].map(function (dir) {\n    return styles[attr + dir + subattr];\n  }).join(' ');\n}\n\nfunction copyStyles(inputNode, hintNode) {\n  var inputStyle = window.getComputedStyle(inputNode);\n  /* eslint-disable no-param-reassign */\n\n  hintNode.style.borderStyle = interpolateStyle(inputStyle, 'border', 'style');\n  hintNode.style.borderWidth = interpolateStyle(inputStyle, 'border', 'width');\n  hintNode.style.fontSize = inputStyle.fontSize;\n  hintNode.style.lineHeight = inputStyle.lineHeight;\n  hintNode.style.margin = interpolateStyle(inputStyle, 'margin');\n  hintNode.style.padding = interpolateStyle(inputStyle, 'padding');\n  /* eslint-enable no-param-reassign */\n}\n\nfunction hintContainer(Input) {\n  var HintedInput =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(HintedInput, _React$Component);\n\n    function HintedInput() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n      _defineProperty(_assertThisInitialized(_this), \"_hint\", undefined);\n\n      _defineProperty(_assertThisInitialized(_this), \"_input\", undefined);\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleKeyDown\", function (e) {\n        var _this$props = _this.props,\n            initialItem = _this$props.initialItem,\n            onAdd = _this$props.onAdd,\n            onKeyDown = _this$props.onKeyDown;\n\n        if (shouldSelectHint(e, _this.props)) {\n          e.preventDefault(); // Prevent input from blurring on TAB.\n\n          onAdd(initialItem);\n        }\n\n        onKeyDown(e);\n      });\n\n      return _this;\n    }\n\n    var _proto = HintedInput.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      copyStyles(this._input, this._hint);\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      copyStyles(this._input, this._hint);\n    };\n\n    _proto.render = function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          hintText = _this$props2.hintText,\n          initialItem = _this$props2.initialItem,\n          _inputRef = _this$props2.inputRef,\n          onAdd = _this$props2.onAdd,\n          selectHintOnEnter = _this$props2.selectHintOnEnter,\n          props = _objectWithoutPropertiesLoose(_this$props2, [\"hintText\", \"initialItem\", \"inputRef\", \"onAdd\", \"selectHintOnEnter\"]);\n\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flex: 1,\n          height: '100%',\n          position: 'relative'\n        }\n      }, React.createElement(Input, _extends({}, props, {\n        inputRef: function inputRef(input) {\n          _this2._input = input;\n\n          _inputRef(input);\n        },\n        onKeyDown: this._handleKeyDown\n      })), React.createElement(\"input\", {\n        \"aria-hidden\": true,\n        className: \"rbt-input-hint\",\n        ref: function ref(hint) {\n          return _this2._hint = hint;\n        },\n        readOnly: true,\n        style: {\n          backgroundColor: 'transparent',\n          borderColor: 'transparent',\n          boxShadow: 'none',\n          color: 'rgba(0, 0, 0, 0.35)',\n          left: 0,\n          pointerEvents: 'none',\n          position: 'absolute',\n          top: 0,\n          width: '100%'\n        },\n        tabIndex: -1,\n        value: hintText\n      }));\n    };\n\n    return HintedInput;\n  }(React.Component);\n\n  _defineProperty(HintedInput, \"displayName\", \"hintContainer(\" + getDisplayName(Input) + \")\");\n\n  return withContext(HintedInput, ['hintText', 'initialItem', 'onAdd', 'selectHintOnEnter']);\n}\n\nexport default hintContainer;","map":null,"metadata":{},"sourceType":"module"}