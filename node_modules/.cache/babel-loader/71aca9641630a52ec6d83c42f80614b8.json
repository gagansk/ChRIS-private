{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from '@patternfly/react-styles';\nimport styles from \"../../@patternfly/patternfly/components/Badge/badge.css.js\";\nexport var propTypes = {\n  /**  Adds styling to the badge to indicate it has been read */\n  isRead: PropTypes.bool,\n\n  /** content rendered inside the Badge */\n  children: PropTypes.node,\n\n  /** additional classes added to the Badge */\n  className: PropTypes.string,\n\n  /** Additional props are spread to the container <span> */\n  '': PropTypes.any\n};\nexport var defaultProps = {\n  isRead: false,\n  children: '',\n  className: ''\n};\n\nvar Badge = function Badge(_ref) {\n  var isRead = _ref.isRead,\n      className = _ref.className,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"isRead\", \"className\", \"children\"]);\n\n  return React.createElement(\"span\", _extends({}, props, {\n    className: css(styles.badge, isRead ? styles.modifiers.read : styles.modifiers.unread, className)\n  }), children);\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}