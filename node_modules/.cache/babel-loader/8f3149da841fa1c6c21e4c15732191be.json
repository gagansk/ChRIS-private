{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport styles from \"../../@patternfly/patternfly/components/Alert/alert.css.js\";\nimport accessibleStyles from \"../../@patternfly/patternfly/utilities/Accessibility/accessibility.css.js\";\nimport AlertIcon from './AlertIcon';\nimport { capitalize } from '../../helpers/util';\nexport var AlertVariant = {\n  success: 'success',\n  danger: 'danger',\n  warning: 'warning',\n  info: 'info'\n};\nvar propTypes = {\n  /** Adds Alert variant styles */\n  variant: PropTypes.oneOf(Object.values(AlertVariant)).isRequired,\n\n  /** Title of the Alert */\n  title: PropTypes.string.isRequired,\n\n  /** Action button to put in the Alert.  Should be <AlertActionLink> or <AlertActionCloseButton> */\n  action: PropTypes.node,\n\n  /** content rendered inside the Alert */\n  children: PropTypes.node,\n\n  /** additional classes added to the Alert */\n  className: PropTypes.string,\n\n  /** Adds accessible text to the Alert */\n  'aria-label': PropTypes.string,\n\n  /** Variant label text for screen readers */\n  variantLabel: PropTypes.string,\n\n  /** Additional props are spread to the container <div>  */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  'aria-label': undefined,\n  action: null,\n  children: '',\n  className: '',\n  variantLabel: null\n};\n\nvar getDefaultAriaLabel = function getDefaultAriaLabel(variant) {\n  return \"\".concat(capitalize(AlertVariant[variant]), \" Alert\");\n};\n\nvar Alert = function Alert(_ref) {\n  var variant = _ref.variant,\n      variantLabel = _ref.variantLabel,\n      _ref$ariaLabel = _ref['aria-label'],\n      ariaLabel = _ref$ariaLabel === void 0 ? getDefaultAriaLabel(variant) : _ref$ariaLabel,\n      action = _ref.action,\n      title = _ref.title,\n      children = _ref.children,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"variantLabel\", \"aria-label\", \"action\", \"title\", \"children\", \"className\"]);\n\n  variantLabel = variantLabel || capitalize(AlertVariant[variant]);\n  var readerTitle = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, \"\".concat(variantLabel, \" alert:\")), title);\n  var customClassName = css(styles.alert, getModifier(styles, variant, styles.modifiers.info), className);\n  return React.createElement(\"div\", _extends({}, props, {\n    className: customClassName,\n    \"aria-label\": ariaLabel\n  }), React.createElement(AlertIcon, {\n    variant: variant\n  }), React.createElement(\"h4\", {\n    className: css(styles.alertTitle)\n  }, readerTitle), children && React.createElement(\"div\", {\n    className: css(styles.alertDescription)\n  }, React.createElement(\"p\", null, children)), action && React.createElement(\"div\", {\n    className: css(styles.alertAction, className)\n  }, React.cloneElement(action, {\n    title: title,\n    variantLabel: variantLabel\n  })));\n};\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}