{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { EllipsisVIcon } from '@patternfly/react-icons';\nimport Toggle from './Toggle';\nvar defaultAriaLabel = 'Actions';\n\nvar Kebab = function Kebab(_ref) {\n  var props = _extends({}, _ref);\n\n  return React.createElement(Toggle, props, React.createElement(EllipsisVIcon, null));\n};\n\nKebab.propTypes = {\n  /** HTML ID of dropdown toggle */\n  id: PropTypes.string,\n\n  /** Anything which can be rendered as dropdown toggle */\n  children: PropTypes.node,\n\n  /** Classess applied to root element of dropdown toggle */\n  className: PropTypes.string,\n\n  /** Flag to indicate if menu is opened */\n  isOpen: PropTypes.bool,\n\n  /** Label Toggle button */\n  'aria-label': PropTypes.string,\n\n  /** Callback called when toggle is clicked */\n  onToggle: PropTypes.func,\n\n  /** Element which wraps toggle */\n  parentRef: PropTypes.any,\n\n  /** Forces focus state */\n  isFocused: PropTypes.bool,\n\n  /** Forces hover state */\n  isHovered: PropTypes.bool,\n\n  /** Forces active state */\n  isActive: PropTypes.bool,\n\n  /** Display the toggle with no border or background */\n  isPlain: PropTypes.bool,\n\n  /** Additional props are spread to the container component */\n  '': PropTypes.any\n};\nKebab.defaultProps = {\n  id: '',\n  children: null,\n  className: '',\n  isOpen: false,\n  'aria-label': defaultAriaLabel,\n  parentRef: null,\n  isFocused: false,\n  isHovered: false,\n  isActive: false,\n  isPlain: false,\n  onToggle: Function.prototype\n};\nexport default Kebab;","map":null,"metadata":{},"sourceType":"module"}