{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/pages/LogIn/components/LoginForm.tsx\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getAuthToken as _getAuthToken } from \"../../../store/user/actions\";\nimport { withRouter } from \"react-router-dom\";\nimport { LoginForm } from \"@patternfly/react-core\";\n\nvar LoginFormComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginFormComponent, _React$Component);\n\n  function LoginFormComponent(props) {\n    var _this;\n\n    _classCallCheck(this, LoginFormComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginFormComponent).call(this, props));\n\n    _this.handleUsernameChange = function (value) {\n      _this.setState({\n        usernameValue: value\n      });\n    };\n\n    _this.handlePasswordChange = function (passwordValue) {\n      _this.setState({\n        passwordValue: passwordValue\n      });\n    };\n\n    _this.onRememberMeClick = function () {\n      _this.setState({\n        isRememberMeChecked: !_this.state.isRememberMeChecked\n      });\n    };\n\n    _this.state = {\n      usernameValue: \"chris\",\n      passwordValue: \"chris1234\",\n      isRememberMeChecked: true,\n      showHelperText: false,\n      isValidUsername: true,\n      isValidPassword: true\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Description: Create a fake user to work with API, redux store\n\n\n  _createClass(LoginFormComponent, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var getAuthToken = this.props.getAuthToken;\n      var authObj = {\n        password: this.state.passwordValue,\n        username: this.state.usernameValue,\n        isRememberMe: this.state.isRememberMeChecked\n      };\n      getAuthToken(authObj);\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginForm, {\n        showHelperText: this.state.showHelperText,\n        helperText: \"Invalid login credentials.\",\n        usernameLabel: \"Username\",\n        usernameValue: this.state.usernameValue,\n        onChangeUsername: this.handleUsernameChange,\n        isValidUsername: this.state.isValidUsername,\n        passwordLabel: \"Password\",\n        passwordValue: this.state.passwordValue,\n        onChangePassword: this.handlePasswordChange,\n        isValidPassword: this.state.isValidPassword,\n        rememberMeLabel: \"Keep me logged in for 30 days.\",\n        isRememberMeChecked: this.state.isRememberMeChecked,\n        onChangeRememberMe: this.onRememberMeClick,\n        rememberMeAriaLabel: \"Remember me Checkbox\",\n        onLoginButtonClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LoginFormComponent;\n}(React.Component); // export default withRouter(LoginFormComponent);\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getAuthToken: function getAuthToken(user) {\n      return dispatch(_getAuthToken(user));\n    }\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(LoginFormComponent));","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/pages/LogIn/components/LoginForm.tsx"],"names":["React","connect","getAuthToken","withRouter","LoginForm","LoginFormComponent","props","handleUsernameChange","value","setState","usernameValue","handlePasswordChange","passwordValue","onRememberMeClick","isRememberMeChecked","state","showHelperText","isValidUsername","isValidPassword","handleSubmit","bind","event","authObj","password","username","isRememberMe","preventDefault","Component","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { getAuthToken } from \"../../../store/user/actions\";\nimport { IUserState } from \"../../../store/user/types\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\nimport { LoginForm } from \"@patternfly/react-core\";\ninterface IPropsFromDispatch {\n  getAuthToken: typeof getAuthToken;\n}\n\ninterface IState {\n  usernameValue: string;\n  passwordValue: string;\n  isRememberMeChecked: boolean;\n  showHelperText: boolean;\n  isValidUsername: boolean;\n  isValidPassword: boolean;\n}\n\ntype AllProps = IPropsFromDispatch & RouteComponentProps;\n\nclass LoginFormComponent extends React.Component<AllProps, IState> {\n  constructor(props: AllProps) {\n    super(props);\n    this.state = {\n      usernameValue: \"chris\",\n      passwordValue: \"chris1234\",\n      isRememberMeChecked: true,\n      showHelperText: false,\n      isValidUsername: true,\n      isValidPassword: true\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Description: Create a fake user to work with API, redux store\n  handleSubmit(event: Event) {\n    const { getAuthToken } = this.props;\n    const authObj = {\n      password: this.state.passwordValue,\n      username: this.state.usernameValue,\n      isRememberMe: this.state.isRememberMeChecked\n    };\n    getAuthToken(authObj);\n    event.preventDefault();\n  }\n\n  handleUsernameChange = (value: string) => {\n    this.setState({ usernameValue: value });\n  }\n  handlePasswordChange = (passwordValue: string) => {\n    this.setState({ passwordValue });\n  }\n\n  onRememberMeClick = () => {\n    this.setState({ isRememberMeChecked: !this.state.isRememberMeChecked });\n  }\n\n  render() {\n    return (\n      <LoginForm\n        showHelperText={this.state.showHelperText}\n        helperText= \"Invalid login credentials.\"\n        usernameLabel=\"Username\"\n        usernameValue={this.state.usernameValue}\n        onChangeUsername={this.handleUsernameChange}\n        isValidUsername={this.state.isValidUsername}\n        passwordLabel=\"Password\"\n        passwordValue={this.state.passwordValue}\n        onChangePassword={this.handlePasswordChange}\n        isValidPassword={this.state.isValidPassword}\n        rememberMeLabel=\"Keep me logged in for 30 days.\"\n        isRememberMeChecked={this.state.isRememberMeChecked}\n        onChangeRememberMe={this.onRememberMeClick}\n        rememberMeAriaLabel=\"Remember me Checkbox\"\n        onLoginButtonClick={this.handleSubmit}\n      />\n    );\n  }\n}\n\n// export default withRouter(LoginFormComponent);\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  getAuthToken: (user: IUserState) => dispatch(getAuthToken(user))\n});\nexport default withRouter(\n  connect(\n    null,\n    mapDispatchToProps\n  )(LoginFormComponent)\n);\n"]},"metadata":{},"sourceType":"module"}