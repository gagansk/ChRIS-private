{"ast":null,"code":"import _slicedToArray from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/plugin/pluginOutput.tsx\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon, EyeIcon, DownloadIcon } from \"@patternfly/react-icons\";\nimport PluginViewerModal from \"./PluginViewerModal\";\n\nvar PluginOutput = function PluginOutput(props) {\n  var parseFilesLabel = function parseFilesLabel(filesArr) {\n    return \"\".concat(filesArr.length, \" \").concat(filesArr.length === 1 ? \"file\" : \"files\");\n  }; // Set local state hook\n\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isModalOpen = _useState2[0],\n      setValue = _useState2[1]; // Temp - set to false\n\n\n  var handleModalToggle = function handleModalToggle() {\n    setValue(!isModalOpen);\n  };\n\n  return !!props.files && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Data:\"), !props.files.length ? React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(ExclamationCircleIcon, {\n    color: \"#007bba\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), \" No files found\") : parseFilesLabel(props.files)), props.files.length > 0 && React.createElement(\"div\", {\n    className: \"btn-div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"secondary\",\n    isBlock: true,\n    onClick: props.handleDownloadData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(DownloadIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), \" Download Data\"), React.createElement(Button, {\n    variant: \"secondary\",\n    isBlock: true,\n    onClick: handleModalToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(EyeIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), \" View Data\")), React.createElement(PluginViewerModal, {\n    isModalOpen: isModalOpen,\n    handleModalToggle: handleModalToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(PluginOutput);","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/plugin/pluginOutput.tsx"],"names":["React","useState","Button","ExclamationCircleIcon","EyeIcon","DownloadIcon","PluginViewerModal","PluginOutput","props","parseFilesLabel","filesArr","length","isModalOpen","setValue","handleModalToggle","files","handleDownloadData","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SACEC,qBADF,EAEEC,OAFF,EAGEC,YAHF,QAIO,yBAJP;AAMA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAQA,IAAMC,YAA+C,GAAG,SAAlDA,YAAkD,CAACC,KAAD,EAAqB;AAC3E,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAA6B;AACnD,qBAAUA,QAAQ,CAACC,MAAnB,cAA6BD,QAAQ,CAACC,MAAT,KAAoB,CAApB,GAAwB,MAAxB,GAAiC,OAA9D;AACD,GAFD,CAD2E,CAK3E;;;AAL2E,kBAM3CV,QAAQ,CAAC,KAAD,CANmC;AAAA;AAAA,MAMpEW,WANoE;AAAA,MAMvDC,QANuD,kBAM1B;;;AACjD,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BD,IAAAA,QAAQ,CAAC,CAACD,WAAF,CAAR;AACD,GAFD;;AAIA,SACE,CAAC,CAACJ,KAAK,CAACO,KAAR,IACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEG,CAACP,KAAK,CAACO,KAAN,CAAYJ,MAAb,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,oBADD,GAKCF,eAAe,CAACD,KAAK,CAACO,KAAP,CAPnB,CADF,EAWGP,KAAK,CAACO,KAAN,CAAYJ,MAAZ,GAAqB,CAArB,IACC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,OAAO,MAFT;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACQ,kBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,mBADF,EAOE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,OAAO,MAAnC;AAAoC,IAAA,OAAO,EAAEF,iBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAPF,CAZJ,EAwBE,oBAAC,iBAAD;AAAmB,IAAA,WAAW,EAAEF,WAAhC;AAA6C,IAAA,iBAAiB,EAAEE,iBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CAFJ;AA8BD,CAzCD;;AA2CA,eAAed,KAAK,CAACiB,IAAN,CAAWV,YAAX,CAAf","sourcesContent":["import React, {useState} from \"react\";\nimport { Button } from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  EyeIcon,\n  DownloadIcon\n} from \"@patternfly/react-icons\";\nimport { IFeedFile } from \"../../api/models/feed-file.model\";\nimport PluginViewerModal from \"./PluginViewerModal\";\n\ntype AllProps = {\n  files: IFeedFile[];\n  handleDownloadData: () => void;\n  handleViewData: () => void;\n};\n\nconst PluginOutput: React.FunctionComponent<AllProps> = (props: AllProps) => {\n  const parseFilesLabel = (filesArr: any[]): string => {\n    return `${filesArr.length} ${filesArr.length === 1 ? \"file\" : \"files\"}`;\n  };\n\n  // Set local state hook\n  const [isModalOpen, setValue] = useState(false); // Temp - set to false\n  const handleModalToggle = () => {\n    setValue(!isModalOpen);\n  };\n\n  return (\n    !!props.files && (\n      <React.Fragment>\n        <div>\n          <label>Data:</label>\n          {!props.files.length ? (\n            <span>\n              <ExclamationCircleIcon color=\"#007bba\" /> No files found\n            </span>\n          ) : (\n            parseFilesLabel(props.files)\n          )}\n        </div>\n        {props.files.length > 0 && (\n          <div className=\"btn-div\">\n            <Button\n              variant=\"secondary\"\n              isBlock\n              onClick={props.handleDownloadData} >\n              <DownloadIcon /> Download Data\n            </Button>\n            <Button variant=\"secondary\" isBlock onClick={handleModalToggle}>\n              <EyeIcon /> View Data\n            </Button>\n          </div>\n        )}\n        <PluginViewerModal isModalOpen={isModalOpen} handleModalToggle={handleModalToggle}  />\n      </React.Fragment>\n    )\n  );\n};\n\nexport default React.memo(PluginOutput);\n"]},"metadata":{},"sourceType":"module"}