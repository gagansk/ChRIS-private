{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Input from './Input.react';\nimport Token from './Token.react';\nimport { getOptionLabel, isSelectable } from '../utils';\nimport hintContainer from '../containers/hintContainer';\nimport withClassNames from '../containers/withClassNames';\nimport { BACKSPACE } from '../constants';\nvar HintedInput = hintContainer(Input);\nvar propTypes = {\n  /**\n   * Provides a hook for customized rendering of tokens when multiple\n   * selections are enabled.\n   */\n  renderToken: PropTypes.func\n};\nvar defaultProps = {\n  renderToken: function renderToken(option, props, idx) {\n    return React.createElement(Token, {\n      disabled: props.disabled,\n      key: idx,\n      onRemove: props.onRemove,\n      tabIndex: props.tabIndex\n    }, getOptionLabel(option, props.labelKey));\n  }\n};\n\nvar TypeaheadInputMulti =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TypeaheadInputMulti, _React$Component);\n\n  function TypeaheadInputMulti() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_wrapper\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderToken\", function (option, idx) {\n      var _this$props = _this.props,\n          _onRemove = _this$props.onRemove,\n          renderToken = _this$props.renderToken;\n\n      var props = _extends({}, _this.props, {\n        onRemove: function onRemove() {\n          return _onRemove(option);\n        }\n      });\n\n      return renderToken(option, props, idx);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleContainerClickOrFocus\", function (e) {\n      // Don't focus the input if it's disabled.\n      if (_this.props.disabled) {\n        e.currentTarget.blur();\n        return;\n      } // Move cursor to the end if the user clicks outside the actual input.\n\n\n      var inputNode = _this._input;\n\n      if (e.currentTarget !== inputNode && isSelectable(inputNode)) {\n        inputNode.selectionStart = inputNode.value.length;\n      }\n\n      inputNode.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleKeyDown\", function (e) {\n      var _this$props2 = _this.props,\n          onKeyDown = _this$props2.onKeyDown,\n          selected = _this$props2.selected,\n          value = _this$props2.value;\n\n      switch (e.keyCode) {\n        case BACKSPACE:\n          if (e.currentTarget === _this._input && selected.length && !value) {\n            // If the input is selected and there is no text, focus the last\n            // token when the user hits backspace.\n            var children = _this._wrapper.children;\n            var lastToken = children[children.length - 2];\n            lastToken && lastToken.focus();\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      onKeyDown(e);\n    });\n\n    return _this;\n  }\n\n  var _proto = TypeaheadInputMulti.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        className = _this$props3.className,\n        inputClassName = _this$props3.inputClassName,\n        labelKey = _this$props3.labelKey,\n        onRemove = _this$props3.onRemove,\n        renderToken = _this$props3.renderToken,\n        selected = _this$props3.selected,\n        props = _objectWithoutPropertiesLoose(_this$props3, [\"className\", \"inputClassName\", \"labelKey\", \"onRemove\", \"renderToken\", \"selected\"]);\n\n    return (\n      /* eslint-disable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-disable jsx-a11y/click-events-have-key-events */\n      React.createElement(\"div\", {\n        className: cx('rbt-input-multi', className),\n        disabled: props.disabled,\n        onClick: this._handleContainerClickOrFocus,\n        onFocus: this._handleContainerClickOrFocus,\n        tabIndex: -1\n      }, React.createElement(\"div\", {\n        className: \"rbt-input-wrapper\",\n        ref: function ref(el) {\n          return _this2._wrapper = el;\n        }\n      }, selected.map(this._renderToken), React.createElement(HintedInput, _extends({}, props, {\n        className: inputClassName,\n        inputRef: function inputRef(input) {\n          _this2._input = input;\n\n          _this2.props.inputRef(input);\n        },\n        onKeyDown: this._handleKeyDown,\n        style: {\n          backgroundColor: 'transparent',\n          border: 0,\n          boxShadow: 'none',\n          cursor: 'inherit',\n          outline: 'none',\n          padding: 0,\n          width: '100%',\n          zIndex: 1\n        }\n      }))))\n      /* eslint-enable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-enable jsx-a11y/click-events-have-key-events */\n\n    );\n  };\n\n  return TypeaheadInputMulti;\n}(React.Component);\n\n_defineProperty(TypeaheadInputMulti, \"propTypes\", propTypes);\n\n_defineProperty(TypeaheadInputMulti, \"defaultProps\", defaultProps);\n\nexport default withClassNames(TypeaheadInputMulti);","map":null,"metadata":{},"sourceType":"module"}