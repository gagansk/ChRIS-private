{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _ from \"lodash\"; // Description: Builds the file explorer tree\n\n// Description: get file type by file extention\nexport function getFileExtension(item) {\n  var isfile = !!item.leaf && item.leaf;\n  return item.module.substring(item.module.lastIndexOf(\".\") + 1);\n} // Description: takes an array of files and build the file explorer tree\n\nvar UITreeNodeModel =\n/*#__PURE__*/\nfunction () {\n  function UITreeNodeModel(items, selected) {\n    var _this = this;\n\n    _classCallCheck(this, UITreeNodeModel);\n\n    this._items = void 0;\n    this._worker = {\n      module: \"root\",\n      children: []\n    };\n    this._previousItem = \"root\";\n    this._previousObj = this._worker;\n    this._folderTemplate = {\n      module: \"\",\n      collapsed: false,\n      leaf: false,\n      children: []\n    };\n    this._fileTemplate = {\n      module: \"\",\n      leaf: true,\n      file: {}\n    };\n    this.tree = this._worker;\n\n    this.getTree = function () {\n      return _this.tree;\n    };\n\n    this._parseFileArray = function (fileArray) {\n      fileArray.forEach(function (item, i) {\n        var isLeaf = i === fileArray.length - 1;\n        !isLeaf ? _this._AddFolder(item) : _this._addFile(item);\n      });\n    };\n\n    this._AddFolder = function (item) {\n      var newFolder = Object.assign({}, _this._folderTemplate, {\n        module: item\n      }); // This is what we will add\n\n      if (!!_this._previousObj && !!_this._previousObj.children) {\n        var newArr = _this._previousObj.children.slice();\n\n        var existinModule = _.find(newArr, {\n          module: item\n        });\n\n        if (!!!existinModule) {\n          newArr.push(newFolder);\n          _this._previousObj.children = newArr;\n        }\n      }\n\n      _this._findChildrenArr(item, _this._worker);\n\n      _this._previousItem = item;\n    };\n\n    this._addFile = function (item) {\n      var newFile = Object.assign({}, _this._fileTemplate, {\n        module: item,\n        file: _this._fetchItem(item)\n      });\n\n      _this._findChildrenArr(_this._previousItem, _this._worker);\n\n      if (!!_this._previousObj && !!_this._previousObj.children) {\n        var newArr = _this._previousObj.children.slice();\n\n        newArr.push(newFile);\n        _this._previousObj.children = newArr;\n      }\n    };\n\n    this._fetchItem = function (item) {\n      return _.find(_this._items, function (o) {\n        return o.fname.indexOf(\"/\".concat(item)) > 0;\n      });\n    };\n\n    this._findChildrenArr = function (item, node) {\n      if (!!node.children) {\n        var resultArr = _.find(node.children, function (o) {\n          return o.module === item;\n        });\n\n        if (!!resultArr) {\n          _this._previousObj = resultArr;\n          return resultArr;\n        } else if (!!node.children && node.children.length) {\n          node.children.forEach(function (subobj) {\n            return _this._findChildrenArr(item, subobj);\n          });\n        }\n      }\n    };\n\n    this._convertFiletoArray = function (item, pluginName) {\n      var fileName = item.fname; // find the pluginName within the filename string then decompose the substring\n\n      return fileName.substring(fileName.indexOf(pluginName), fileName.length).split(\"/\");\n    };\n\n    this._resetholders = function () {\n      _this._previousItem = \"root\";\n      _this._previousObj = _this._worker;\n    };\n\n    this._items = items;\n    this.parseUiTree(items, selected);\n  }\n\n  _createClass(UITreeNodeModel, [{\n    key: \"parseUiTree\",\n    // Description: Parse Plugin file array into IUITreeNode object - build the tree\n    value: function parseUiTree(items, selected) {\n      var _this2 = this;\n\n      var pluginName = \"\".concat(selected.plugin_name, \"_\").concat(selected.id);\n      var root = \"chris/feed_\".concat(selected.feed_id, \"/...\"); // modules Name\n\n      this._worker.module = this._previousItem = root;\n\n      if (!!items && items.length) {\n        items.forEach(function (item) {\n          var fileArray = _this2._convertFiletoArray(item, pluginName);\n\n          _this2._parseFileArray(fileArray);\n\n          _this2._resetholders();\n        });\n      }\n\n      this.tree = this._worker;\n    } // Description: Go through array and add to _worker object\n\n  }]);\n\n  return UITreeNodeModel;\n}();\n\nexport { UITreeNodeModel as default };","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/api/models/file-explorer.ts"],"names":["_","getFileExtension","item","isfile","leaf","module","substring","lastIndexOf","UITreeNodeModel","items","selected","_items","_worker","children","_previousItem","_previousObj","_folderTemplate","collapsed","_fileTemplate","file","tree","getTree","_parseFileArray","fileArray","forEach","i","isLeaf","length","_AddFolder","_addFile","newFolder","Object","assign","newArr","slice","existinModule","find","push","_findChildrenArr","newFile","_fetchItem","o","fname","indexOf","node","resultArr","subobj","_convertFiletoArray","pluginName","fileName","split","_resetholders","parseUiTree","plugin_name","id","root","feed_id"],"mappings":"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","sourcesContent":["import { IPluginItem } from \"./pluginInstance.model\";\nimport { IFeedFile } from \"./feed-file.model\";\nimport _ from \"lodash\";\n\n// Description: Builds the file explorer tree\nexport interface IUITreeNode {\n  module: string;\n  children?: IUITreeNode[];\n  collapsed?: boolean;\n  leaf?: boolean;\n  file?: any;\n}\n\n// Description: get file type by file extention\nexport function getFileExtension(item: IUITreeNode) {\n  const isfile = !!item.leaf && item.leaf;\n  return item.module.substring(item.module.lastIndexOf(\".\") + 1);\n}\n\n\n// Description: takes an array of files and build the file explorer tree\nexport default class UITreeNodeModel {\n  private _items: IFeedFile[];\n  private _worker: IUITreeNode = {\n    module: \"root\",\n    children: []\n  };\n  private _previousItem = \"root\";\n  private _previousObj = this._worker;\n  private _folderTemplate: IUITreeNode = {\n    module: \"\",\n    collapsed: false,\n    leaf: false,\n    children: []\n  };\n  private _fileTemplate: IUITreeNode = {\n    module: \"\",\n    leaf: true,\n    file: {}\n  };\n  tree: IUITreeNode = this._worker;\n\n  constructor(items: IFeedFile[], selected: IPluginItem) {\n    this._items = items;\n    this.parseUiTree(items, selected);\n  }\n  getTree = () => {\n    return this.tree;\n  }\n\n  // Description: Parse Plugin file array into IUITreeNode object - build the tree\n  parseUiTree(items: IFeedFile[], selected: IPluginItem) {\n    const pluginName = `${selected.plugin_name}_${selected.id}`;\n    const root = `chris/feed_${selected.feed_id}/...`; // modules Name\n    this._worker.module = this._previousItem = root;\n\n    if (!!items && items.length) {\n      items.forEach((item: IFeedFile) => {\n        const fileArray = this._convertFiletoArray(item, pluginName);\n        this._parseFileArray(fileArray);\n        this._resetholders();\n      });\n    }\n    this.tree = this._worker;\n  }\n\n  // Description: Go through array and add to _worker object\n  private _parseFileArray = (fileArray: string[]) => {\n    fileArray.forEach((item: string, i: number) => {\n      const isLeaf = i === fileArray.length - 1;\n      !isLeaf ? this._AddFolder(item) : this._addFile(item);\n    });\n  }\n\n  // Description: Add or find a folder in the tree\n  private _AddFolder = (item: string) => {\n    const newFolder = Object.assign({}, this._folderTemplate, { module: item }); // This is what we will add\n    if (!!this._previousObj && !!this._previousObj.children) {\n      const newArr = this._previousObj.children.slice();\n      const existinModule = _.find(newArr, { module: item });\n      if (!!!existinModule) {\n        newArr.push(newFolder);\n        this._previousObj.children = newArr;\n      }\n    }\n    this._findChildrenArr(item, this._worker);\n    this._previousItem = item;\n  }\n\n  // Description: Add a File\n  private _addFile = (item: string) => {\n    const newFile = Object.assign({}, this._fileTemplate, { module: item, file: this._fetchItem(item) });\n    this._findChildrenArr(this._previousItem, this._worker);\n    if (!!this._previousObj && !!this._previousObj.children) {\n      const newArr = this._previousObj.children.slice();\n      newArr.push(newFile);\n      this._previousObj.children = newArr;\n    }\n  }\n\n  // Description: Fetch the item from array\n  private _fetchItem = (item: string) => {\n    return _.find(this._items, (o: IFeedFile) => {\n      return (o.fname.indexOf(`/${item}`) > 0);\n    });\n  }\n  // Description: Finds and returns an object with the module: \"[item as name]\"\n  private _findChildrenArr = (item: string, node: IUITreeNode) => {\n    if (!!node.children) {\n      const resultArr = _.find(node.children, (o: IUITreeNode) => {\n        return o.module === item;\n      });\n\n      if (!!resultArr) {\n        this._previousObj = resultArr;\n        return resultArr;\n      } else if (!!node.children && node.children.length) {\n        node.children.forEach((subobj: IUITreeNode) => {\n          return this._findChildrenArr(item, subobj);\n        });\n      }\n    }\n  }\n\n  // Description: covert file string to an array\n  private _convertFiletoArray = (item: IFeedFile, pluginName: string) => {\n    const fileName = item.fname;\n    // find the pluginName within the filename string then decompose the substring\n    return fileName\n      .substring(fileName.indexOf(pluginName), fileName.length)\n      .split(\"/\");\n  }\n\n  // Description: reset placeholder props\n  private _resetholders = () => {\n    this._previousItem = \"root\";\n    this._previousObj = this._worker;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}