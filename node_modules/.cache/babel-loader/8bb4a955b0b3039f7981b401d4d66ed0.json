{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Page/page.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { BarsIcon } from '@patternfly/react-icons';\nimport { Button, ButtonVariant } from '../../components/Button';\nvar propTypes = {\n  /** Additional classes added to the page header */\n  className: PropTypes.string,\n\n  /** Component to render the logo/brand (e.g. <Brand />) */\n  logo: PropTypes.node,\n\n  /** Additional props passed to the logo anchor container */\n  logoProps: PropTypes.object,\n\n  /** Component to render the toolbar (e.g. <Toolbar />) */\n  toolbar: PropTypes.node,\n\n  /** Component to render the avatar (e.g. <Avatar /> */\n  avatar: PropTypes.node,\n\n  /** Component to render navigation within the header (e.g. <Nav /> */\n  topNav: PropTypes.node,\n\n  /** True to show the nav toggle button (toggles side nav) */\n  showNavToggle: PropTypes.bool,\n\n  /** Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */\n  onNavToggle: PropTypes.func,\n\n  /** True if the side nav is shown  */\n  isNavOpen: PropTypes.bool,\n\n  /** Callback function to handle the side nav toggle button */\n  'aria-label': PropTypes.string,\n\n  /** Additional props are spread to the container <header> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  className: '',\n  logo: null,\n  logoProps: null,\n  toolbar: null,\n  avatar: null,\n  topNav: null,\n  showNavToggle: false,\n  isNavOpen: true,\n  onNavToggle: function onNavToggle() {\n    return undefined;\n  },\n  'aria-label': 'Global navigation'\n};\n\nvar PageHeader = function PageHeader(_ref) {\n  var className = _ref.className,\n      logo = _ref.logo,\n      logoProps = _ref.logoProps,\n      toolbar = _ref.toolbar,\n      avatar = _ref.avatar,\n      topNav = _ref.topNav,\n      isNavOpen = _ref.isNavOpen,\n      showNavToggle = _ref.showNavToggle,\n      onNavToggle = _ref.onNavToggle,\n      ariaLabel = _ref['aria-label'],\n      props = _objectWithoutProperties(_ref, [\"className\", \"logo\", \"logoProps\", \"toolbar\", \"avatar\", \"topNav\", \"isNavOpen\", \"showNavToggle\", \"onNavToggle\", \"aria-label\"]);\n\n  return React.createElement(\"header\", _extends({\n    role: \"banner\",\n    className: css(styles.pageHeader, className)\n  }, props), React.createElement(\"div\", {\n    className: css(styles.pageHeaderBrand)\n  }, showNavToggle && React.createElement(\"div\", {\n    className: css(styles.pageHeaderBrandToggle)\n  }, React.createElement(Button, {\n    id: \"nav-toggle\",\n    onClick: onNavToggle,\n    \"aria-label\": ariaLabel,\n    \"aria-controls\": \"page-sidebar\",\n    \"aria-expanded\": isNavOpen ? 'true' : 'false',\n    variant: ButtonVariant.plain\n  }, React.createElement(BarsIcon, null))), React.createElement(\"a\", _extends({\n    className: css(styles.pageHeaderBrandLink)\n  }, logoProps), logo)), topNav && React.createElement(\"div\", {\n    className: css(styles.pageHeaderNav)\n  }, topNav), React.createElement(\"div\", {\n    className: css(styles.pageHeaderTools)\n  }, toolbar, avatar));\n};\n\nPageHeader.propTypes = propTypes;\nPageHeader.defaultProps = defaultProps;\nexport default PageHeader;","map":null,"metadata":{},"sourceType":"module"}