{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport FocusTrap from 'focus-trap-react';\nimport ModalBoxBody from './ModalBoxBody';\nimport ModalBoxHeader from './ModalBoxHeader';\nimport ModalBoxHCloseButton from './ModalBoxCloseButton';\nimport ModalBox from './ModalBox';\nimport ModalBoxFooter from './ModalBoxFooter';\nimport Backdrop from '../Backdrop/Backdrop';\nimport Bullseye from '../../layouts/Bullseye/Bullseye';\nimport bullseyeStyle from \"../../@patternfly/patternfly/layouts/Bullseye/bullseye.css.js\";\nimport { css } from '@patternfly/react-styles';\nvar propTypes = {\n  /** content rendered inside the Modal. */\n  children: PropTypes.node.isRequired,\n\n  /** additional classes added to the button */\n  className: PropTypes.string,\n\n  /** Flag to show the modal */\n  isOpen: PropTypes.bool,\n\n  /** Content of the Modal Header */\n  title: PropTypes.string.isRequired,\n\n  /** Flag to show the title */\n  hideTitle: PropTypes.bool,\n\n  /** Content of the Modal Footer */\n  actions: PropTypes.any,\n\n  /** A callback for when the close button is clicked */\n  onClose: PropTypes.func,\n\n  /** Default width of the Modal. */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Creates a large version of the Modal */\n  isLarge: PropTypes.bool,\n\n  /** Creates a small version of the Modal */\n  isSmall: PropTypes.bool,\n\n  /** id to use for Modal Box description */\n  id: PropTypes.string.isRequired,\n\n  /** Additional props are spread to the ModalBoxBody component */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  width: null,\n  className: '',\n  isOpen: false,\n  hideTitle: false,\n  actions: [],\n  onClose: function onClose() {\n    return undefined;\n  },\n  isLarge: false,\n  isSmall: false\n};\n\nvar ModalContent = function ModalContent(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      isOpen = _ref.isOpen,\n      title = _ref.title,\n      hideTitle = _ref.hideTitle,\n      actions = _ref.actions,\n      onClose = _ref.onClose,\n      isLarge = _ref.isLarge,\n      isSmall = _ref.isSmall,\n      width = _ref.width,\n      id = _ref.id,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isOpen\", \"title\", \"hideTitle\", \"actions\", \"onClose\", \"isLarge\", \"isSmall\", \"width\", \"id\"]);\n\n  var modalBoxHeader = title && React.createElement(ModalBoxHeader, null, \" \", title, \" \");\n  var modalBoxFooter = actions.length > 0 && React.createElement(ModalBoxFooter, null, \" \", actions, \" \");\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return React.createElement(Backdrop, null, React.createElement(Bullseye, null, React.createElement(FocusTrap, {\n    focusTrapOptions: {\n      clickOutsideDeactivates: true\n    },\n    className: css(bullseyeStyle.bullseye)\n  }, React.createElement(ModalBox, {\n    style: {\n      width: width\n    },\n    className: className,\n    isLarge: isLarge,\n    isSmall: isSmall,\n    title: title,\n    id: id\n  }, React.createElement(ModalBoxHCloseButton, {\n    onClose: onClose\n  }), modalBoxHeader, React.createElement(ModalBoxBody, _extends({}, props, {\n    id: id\n  }), children), modalBoxFooter))));\n};\n\nModalContent.propTypes = propTypes;\nModalContent.defaultProps = defaultProps;\nexport default ModalContent;","map":null,"metadata":{},"sourceType":"module"}