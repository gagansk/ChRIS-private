{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tippy from '@tippy.js/react';\nimport styles from \"../../@patternfly/patternfly/components/Tooltip/tooltip.css.js\";\nimport { css, getModifier } from '@patternfly/react-styles';\nimport TooltipArrow from './TooltipArrow';\nimport TooltipContent from './TooltipContent';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { c_tooltip_MaxWidth as tooltipMaxWidth } from '@patternfly/react-tokens';\nimport { tippyStyles } from './styles';\ntippyStyles();\nexport var TooltipPosition = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'left',\n  right: 'right'\n};\nvar propTypes = {\n  /** Tooltip position */\n  position: PropTypes.oneOf(Object.keys(TooltipPosition).map(function (key) {\n    return TooltipPosition[key];\n  })),\n\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip: PropTypes.bool,\n\n  /** Tooltip additional class */\n  className: PropTypes.string,\n\n  /** Tooltip content */\n  content: PropTypes.node.isRequired,\n\n  /** The reference element to which the tooltip is relatively placed to */\n  children: PropTypes.element.isRequired,\n\n  /** Delay in ms before the tooltip appears */\n  entryDelay: PropTypes.number,\n\n  /** Delay in ms before the tooltip disappears */\n  exitDelay: PropTypes.number,\n\n  /** The element to append the tooltip to, defaults to body */\n  appendTo: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  /** z-index of the tooltip */\n  zIndex: PropTypes.number,\n\n  /** Maximum width of the tooltip (default 12.5rem) */\n  maxWidth: PropTypes.string\n};\nvar defaultProps = {\n  position: 'top',\n  enableFlip: true,\n  className: null,\n  entryDelay: 500,\n  exitDelay: 500,\n  appendTo: function appendTo() {\n    return document.body;\n  },\n  zIndex: 9999,\n  maxWidth: tooltipMaxWidth && tooltipMaxWidth.value\n};\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  function Tooltip() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"storeTippyInstance\", function (tip) {\n      _this.tip = tip;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleEscKeyClick\", function (event) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && _this.tip.state.isVisible) {\n        _this.tip.hide();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('keydown', this.handleEscKeyClick, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('keydown', this.handleEscKeyClick, false);\n    }\n  }, {\n    key: \"extendChildren\",\n    value: function extendChildren() {\n      return React.cloneElement(this.props.children, {\n        isAppLauncher: this.props.isAppLauncher\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          position = _this$props.position,\n          enableFlip = _this$props.enableFlip,\n          children = _this$props.children,\n          className = _this$props.className,\n          bodyContent = _this$props.content,\n          entryDelay = _this$props.entryDelay,\n          exitDelay = _this$props.exitDelay,\n          appendTo = _this$props.appendTo,\n          zIndex = _this$props.zIndex,\n          maxWidth = _this$props.maxWidth,\n          isAppLauncher = _this$props.isAppLauncher,\n          rest = _objectWithoutProperties(_this$props, [\"position\", \"enableFlip\", \"children\", \"className\", \"content\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"isAppLauncher\"]);\n\n      var content = React.createElement(\"div\", _extends({\n        className: css(styles.tooltip, !enableFlip && getModifier(styles, position, styles.modifiers.top), className),\n        role: \"tooltip\"\n      }, rest), React.createElement(TooltipArrow, null), React.createElement(TooltipContent, null, bodyContent));\n      return React.createElement(Tippy, {\n        onCreate: this.storeTippyInstance,\n        maxWidth: maxWidth,\n        zIndex: zIndex,\n        appendTo: appendTo,\n        content: content,\n        lazy: true,\n        animateFill: false,\n        theme: \"pf-tippy\",\n        performance: true,\n        placement: position,\n        delay: [entryDelay, exitDelay],\n        distance: 15,\n        flip: enableFlip,\n        popperOptions: {\n          modifiers: {\n            preventOverflow: {\n              enabled: enableFlip\n            },\n            hide: {\n              enabled: enableFlip\n            }\n          }\n        }\n      }, isAppLauncher ? this.extendChildren() : children);\n    }\n  }]);\n\n  return Tooltip;\n}(React.Component);\n\nTooltip.propTypes = propTypes;\nTooltip.defaultProps = defaultProps;\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}