{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nvar propTypes = {\n  /** Additional classes added to the Login Main Body's Form */\n  className: PropTypes.string,\n\n  /** Flag indicating the Helper Text is visible * */\n  showHelperText: PropTypes.bool,\n\n  /** Content displayed in the Helper Text component * */\n  helperText: PropTypes.node,\n\n  /** Label for the Username Input Field */\n  usernameLabel: PropTypes.string,\n\n  /** Value for the Username */\n  usernameValue: PropTypes.string,\n\n  /** Function that handles the onChange event for the Username */\n  onChangeUsername: PropTypes.func,\n\n  /** Flag indicating if the Username is valid */\n  isValidUsername: PropTypes.bool,\n\n  /** Label for the Password Input Field */\n  passwordLabel: PropTypes.string,\n\n  /** Value for the Password */\n  passwordValue: PropTypes.string,\n\n  /** Function that handles the onChange event for the Password */\n  onChangePassword: PropTypes.func,\n\n  /** Flag indicating if the Password is valid */\n  isValidPassword: PropTypes.bool,\n\n  /** Label for the Log in Button Input */\n  loginButtonLabel: PropTypes.string,\n\n  /** Flag indicating if the Login Button is disabled */\n  isLoginButtonDisabled: PropTypes.bool,\n\n  /** Function that is called when the Login button is clicked */\n  onLoginButtonClick: PropTypes.func,\n\n  /** Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel: PropTypes.string,\n\n  /** Flag indicating if the remember me Checkbox is checked. */\n  isRememberMeChecked: PropTypes.bool,\n\n  /** Function that handles the onChange event for the Remember Me Checkbox */\n  onChangeRememberMe: PropTypes.func,\n\n  /** Aria Label for the Remember me checkbox */\n  rememberMeAriaLabel: function rememberMeAriaLabel(props) {\n    if (props.rememberMeLabel && !props.rememberMeAriaLabel) {\n      return new Error('rememberMeAriaLabel is required with the Remember me checkbox');\n    }\n\n    return null;\n  },\n\n  /** Additional props are spread to the Form component */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  className: '',\n  showHelperText: false,\n  helperText: null,\n  usernameLabel: 'Username',\n  usernameValue: '',\n  onChangeUsername: function onChangeUsername() {\n    return undefined;\n  },\n  isValidUsername: true,\n  passwordLabel: 'Password',\n  passwordValue: '',\n  onChangePassword: function onChangePassword() {\n    return undefined;\n  },\n  isValidPassword: true,\n  loginButtonLabel: 'Log In',\n  isLoginButtonDisabled: false,\n  onLoginButtonClick: function onLoginButtonClick() {\n    return undefined;\n  },\n  rememberMeLabel: '',\n  isRememberMeChecked: false,\n  onChangeRememberMe: function onChangeRememberMe() {\n    return undefined;\n  },\n  rememberMeAriaLabel: ''\n};\n\nvar LoginForm = function LoginForm(_ref) {\n  var className = _ref.className,\n      showHelperText = _ref.showHelperText,\n      helperText = _ref.helperText,\n      usernameLabel = _ref.usernameLabel,\n      usernameValue = _ref.usernameValue,\n      onChangeUsername = _ref.onChangeUsername,\n      isValidUsername = _ref.isValidUsername,\n      passwordLabel = _ref.passwordLabel,\n      passwordValue = _ref.passwordValue,\n      onChangePassword = _ref.onChangePassword,\n      isValidPassword = _ref.isValidPassword,\n      loginButtonLabel = _ref.loginButtonLabel,\n      isLoginButtonDisabled = _ref.isLoginButtonDisabled,\n      onLoginButtonClick = _ref.onLoginButtonClick,\n      rememberMeLabel = _ref.rememberMeLabel,\n      isRememberMeChecked = _ref.isRememberMeChecked,\n      onChangeRememberMe = _ref.onChangeRememberMe,\n      rememberMeAriaLabel = _ref.rememberMeAriaLabel,\n      props = _objectWithoutProperties(_ref, [\"className\", \"showHelperText\", \"helperText\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\", \"rememberMeAriaLabel\"]);\n\n  return React.createElement(Form, _extends({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    isValid: isValidUsername,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    isValid: isValidUsername,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    isValid: isValidPassword,\n    fieldId: \"pf-login-password-id\"\n  }, React.createElement(TextInput, {\n    isRequired: true,\n    type: \"password\",\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    isValid: isValidPassword,\n    value: passwordValue,\n    onChange: onChangePassword\n  })), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    checked: isRememberMeChecked,\n    onChange: onChangeRememberMe,\n    \"aria-label\": rememberMeAriaLabel\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\n\nLoginForm.propTypes = propTypes;\nLoginForm.defaultProps = defaultProps;\nexport default LoginForm;","map":null,"metadata":{},"sourceType":"module"}