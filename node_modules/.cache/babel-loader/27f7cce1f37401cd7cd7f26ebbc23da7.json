{"ast":null,"code":"function isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport ReactDOM from 'react-dom';\nimport { SIDE } from './constants';\nexport function capitalize(input) {\n  return input[0].toUpperCase() + input.substring(1);\n}\nexport function getUniqueId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'pf';\n  var uid = new Date().getTime() + Math.random().toString(36).slice(2);\n  return \"\".concat(prefix, \"-\").concat(uid);\n}\nexport function debounce(func, wait) {\n  var _this = this;\n\n  var timeout;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return func.apply(_this, args);\n    }, wait);\n  };\n}\n/** This function returns the side the element is out of view on (right, left or both)\n * @param {Object} container  The container to check if the element is in view of.\n * @param {Object} element    The element to check if it is view\n * @param {boolean} partial   true if partial view is allowed\n *\n * @return {type} True if the component is in View.\n */\n\nexport function isElementInView(container, element, partial) {\n  var cLeft = container.scrollLeft;\n  var cRight = cLeft + container.clientWidth;\n  var eLeft = element.offsetLeft;\n  var eRight = eLeft + element.clientWidth; // Check if in view\n\n  var isTotal = eLeft >= cLeft && eRight <= cRight;\n  var isPartial = partial && (eLeft < cLeft && eRight > cLeft || eRight > cRight && eLeft < cRight); // Return outcome\n\n  return isTotal || isPartial;\n}\n/** This function returns the side the element is out of view on (right, left or both)\n * @param {Objent} container    The container to check if the element is in view of.\n * @param {Object} element      The element to check if it is view\n *\n * @return {type} right if the element is of the right, left if element is off the left or both if it is off on both sides.\n */\n\nexport function sideElementIsOutOfView(container, element) {\n  var cLeft = container.scrollLeft;\n  var cRight = cLeft + container.clientWidth;\n  var eLeft = element.offsetLeft;\n  var eRight = eLeft + element.clientWidth; // Check if in view\n\n  var isOffLeft = eLeft < cLeft;\n  var isOffRight = eRight > cRight;\n  var side = SIDE.NONE;\n\n  if (isOffRight && isOffLeft) {\n    side = SIDE.BOTH;\n  } else if (isOffRight) {\n    side = SIDE.RIGHT;\n  } else if (isOffLeft) {\n    side = SIDE.LEFT;\n  } // Return outcome\n\n\n  return side;\n}\n/** This function returns the side the element is out of view on (right, left or both)\n * @param {Object} templateString  The string passed by the consumer\n * @param {Object} templateVars The variables passed to the string\n *\n * @return {type} The template string literal result\n */\n\nexport function fillTemplate(templateString, templateVars) {\n  var func = _construct(Function, _toConsumableArray(Object.keys(templateVars)).concat([\"return `\".concat(templateString, \"`;\")]));\n\n  return func.apply(void 0, _toConsumableArray(Object.values(templateVars)));\n}\n/** This function allows for keyboard navigation through dropdowns. The custom argument is optional.\n * @param {number} index The index of the element you're on\n * @param {string} position The orientation of the dropdown\n * @param {string[]} refsCollection Array of refs to the items in the dropdown\n * @param {Object[]} kids Array of items in the dropdown\n * @param {boolean} [custom] Allows for handling of flexible content\n */\n\nexport function keyHandler(index, position, refsCollection, kids) {\n  var custom = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (!Array.isArray(kids)) {\n    return;\n  }\n\n  var nextIndex;\n\n  if (position === 'up') {\n    if (index === 0) {\n      // loop back to end\n      nextIndex = kids.length - 1;\n    } else {\n      nextIndex = index - 1;\n    }\n  } else if (index === kids.length - 1) {\n    // loop back to beginning\n    nextIndex = 0;\n  } else {\n    nextIndex = index + 1;\n  }\n\n  if (refsCollection[nextIndex] === null) {\n    keyHandler(nextIndex, position, refsCollection, kids, custom);\n  } else {\n    /* tslint:disable */\n    custom ? refsCollection[nextIndex].focus && refsCollection[nextIndex].focus() || ReactDOM.findDOMNode(refsCollection[nextIndex]).focus() : refsCollection[nextIndex].focus();\n    /* tslint:enable */\n  }\n}","map":null,"metadata":{},"sourceType":"module"}