{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport styles from \"../../@patternfly/patternfly/components/ChipGroup/chip-group.css.js\";\nimport { Chip } from '@patternfly/react-core';\nimport { fillTemplate } from '../../helpers';\n\nvar ChipGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChipGroup, _React$Component);\n\n  function ChipGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChipGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChipGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggleCollapse\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ChipGroup, [{\n    key: \"renderToolbarGroup\",\n    value: function renderToolbarGroup() {\n      var isOpen = this.state.isOpen;\n      return React.createElement(InnerChipGroup, _extends({}, this.props, {\n        isOpen: isOpen,\n        onToggleCollapse: this.toggleCollapse\n      }));\n    }\n  }, {\n    key: \"renderChipGroup\",\n    value: function renderChipGroup() {\n      var className = this.props.className;\n      var isOpen = this.state.isOpen;\n      return React.createElement(\"div\", {\n        className: css(styles.chipGroup, className)\n      }, React.createElement(InnerChipGroup, _extends({}, this.props, {\n        isOpen: isOpen,\n        onToggleCollapse: this.toggleCollapse\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          withToolbar = _this$props.withToolbar,\n          children = _this$props.children;\n\n      if (React.Children.count(children)) {\n        return withToolbar ? this.renderToolbarGroup() : this.renderChipGroup();\n      }\n\n      return null;\n    }\n  }]);\n\n  return ChipGroup;\n}(React.Component);\n\nvar InnerChipGroup = function InnerChipGroup(props) {\n  var children = props.children,\n      expandedText = props.expandedText,\n      isOpen = props.isOpen,\n      onToggleCollapse = props.onToggleCollapse,\n      collapsedText = props.collapsedText;\n  var collapsedTextResult = fillTemplate(collapsedText, {\n    remaining: React.Children.count(children) - 1\n  });\n  return React.createElement(React.Fragment, null, isOpen ? React.createElement(React.Fragment, null, children) : React.createElement(React.Fragment, null, React.Children.map(children, function (child, i) {\n    if (i === 0) return child;\n  })), React.Children.count(children) > 1 && React.createElement(Chip, {\n    isOverflowChip: true,\n    onClick: onToggleCollapse\n  }, isOpen ? expandedText : collapsedTextResult));\n};\n\nChipGroup.propTypes = {\n  /** Content rendered inside the chip text */\n  children: PropTypes.node,\n\n  /** Additional classes added to the chip item */\n  className: PropTypes.string,\n\n  /** Customizable \"Show Less\" text string */\n  expandedText: PropTypes.string,\n\n  /**\n   * Customizeable template string. Use variable \"${remaining}\" for the overflow chip count.\n   */\n  collapsedText: PropTypes.string,\n\n  /** Flag for grouping with a toolbar & category name */\n  withToolbar: PropTypes.bool\n};\nChipGroup.defaultProps = {\n  children: null,\n  className: '',\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  withToolbar: false\n};\nexport default ChipGroup;","map":null,"metadata":{},"sourceType":"module"}