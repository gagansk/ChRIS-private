{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Children, cloneElement } from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Dropdown/dropdown.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport DropdownMenu from './DropdownMenu';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants'; // seed for the aria-labelledby ID\n\nvar currentId = 0;\nvar propTypes = {\n  /** Anything which can be rendered in a dropdown */\n  children: function children(props) {\n    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {\n      return new Error(\"Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered \");\n    }\n\n    return null;\n  },\n\n  /** Classes applied to root element of dropdown */\n  className: PropTypes.string,\n\n  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */\n  dropdownItems: PropTypes.array,\n\n  /** Flag to indicate if menu is opened */\n  isOpen: PropTypes.bool,\n\n  /** Display the toggle with no border or background */\n  isPlain: PropTypes.bool,\n\n  /** Indicates where menu will be alligned horizontally */\n  position: PropTypes.oneOf(Object.values(DropdownPosition)),\n\n  /** Display menu above or below dropdown toggle */\n  direction: PropTypes.oneOf(Object.values(DropdownDirection)),\n\n  /** Placeholder to use custom toggle elements */\n  toggle: PropTypes.node.isRequired,\n\n  /** Function callback called when user selects item */\n  onSelect: PropTypes.func,\n\n  /** Additional props are spread to the container <div> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: '',\n  dropdownItems: [],\n  isOpen: false,\n  isPlain: false,\n  position: DropdownPosition.left,\n  direction: DropdownDirection.down,\n  onSelect: Function.prototype\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEnter\", function () {\n      _this.openedOnEnter = true;\n    });\n\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.props.isOpen) this.openedOnEnter = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          direction = _this$props.direction,\n          dropdownItems = _this$props.dropdownItems,\n          isOpen = _this$props.isOpen,\n          isPlain = _this$props.isPlain,\n          onSelect = _this$props.onSelect,\n          position = _this$props.position,\n          toggle = _this$props.toggle,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"direction\", \"dropdownItems\", \"isOpen\", \"isPlain\", \"onSelect\", \"position\", \"toggle\"]);\n\n      var id = toggle.props.id || \"pf-toggle-id-\".concat(currentId++);\n      var component;\n      var renderedContent;\n      var ariaHasPopup = null;\n\n      if (dropdownItems && dropdownItems.length > 0) {\n        component = 'ul';\n        renderedContent = dropdownItems;\n        ariaHasPopup = true;\n      } else {\n        component = 'div';\n        renderedContent = children;\n      }\n\n      return React.createElement(\"div\", _extends({}, props, {\n        className: css(styles.dropdown, direction === DropdownDirection.up && styles.modifiers.top, isOpen && styles.modifiers.expanded, className),\n        ref: function ref(_ref) {\n          _this2.parentRef = _ref;\n        }\n      }), Children.map(toggle, function (oneToggle) {\n        return cloneElement(oneToggle, {\n          parentRef: _this2.parentRef,\n          isOpen: isOpen,\n          id: id,\n          isPlain: isPlain,\n          ariaHasPopup: ariaHasPopup,\n          onEnter: _this2.onEnter\n        });\n      }), isOpen && React.createElement(DropdownContext.Provider, {\n        value: function value(event) {\n          return onSelect && onSelect(event);\n        }\n      }, React.createElement(DropdownMenu, {\n        component: component,\n        isOpen: isOpen,\n        position: position,\n        \"aria-labelledby\": id,\n        openedOnEnter: this.openedOnEnter\n      }, renderedContent)));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.propTypes = propTypes;\nDropdown.defaultProps = defaultProps;\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}