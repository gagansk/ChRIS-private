{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport invariant from 'invariant';\nimport head from \"lodash/head\";\nimport isEqual from \"lodash/isEqual\";\nimport noop from \"lodash/noop\";\nimport uniqueId from \"lodash/uniqueId\";\nimport PropTypes from 'prop-types';\nimport isRequiredForA11y from \"prop-types-extra/lib/isRequiredForA11y\";\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport RootCloseWrapper from \"react-overlays/lib/RootCloseWrapper\";\nimport TypeaheadInner from './TypeaheadInner';\nimport TypeaheadInput from './TypeaheadInput';\nimport TypeaheadMenu from './TypeaheadMenu';\nimport { caseSensitiveType, checkPropType, defaultInputValueType, highlightOnlyResultType, ignoreDiacriticsType, inputPropsType, labelKeyType, optionType, selectedType } from '../propTypes';\nimport { addCustomOption, areEqual, defaultFilterBy, getOptionLabel, getStringLabelKey, getUpdatedActiveIndex, getTruncatedOptions, isShown, validateSelectedPropChange } from '../utils';\nimport { DEFAULT_LABELKEY, DOWN, ESC, RETURN, RIGHT, TAB, UP } from '../constants';\nvar propTypes = {\n  /**\n   * Allows the creation of new selections on the fly. Note that any new items\n   * will be added to the list of selections, but not the list of original\n   * options unless handled as such by `Typeahead`'s parent.\n   *\n   * If a function is specified, it will be used to determine whether a custom\n   * option should be included. The return value should be true or false.\n   */\n  allowNew: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n\n  /**\n   * Autofocus the input when the component initially mounts.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Whether or not filtering should be case-sensitive.\n   */\n  caseSensitive: checkPropType(PropTypes.bool, caseSensitiveType),\n\n  /**\n   * The initial value displayed in the text input.\n   */\n  defaultInputValue: checkPropType(PropTypes.string, defaultInputValueType),\n\n  /**\n   * Whether or not the menu is displayed upon initial render.\n   */\n  defaultOpen: PropTypes.bool,\n\n  /**\n   * Specify any pre-selected options. Use only if you want the component to\n   * be uncontrolled.\n   */\n  defaultSelected: optionType,\n\n  /**\n   * Whether to disable the component.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Either an array of fields in `option` to search, or a custom filtering\n   * callback.\n   */\n  filterBy: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string.isRequired), PropTypes.func]),\n\n  /**\n   * Highlights the menu item if there is only one result and allows selecting\n   * that item by hitting enter. Does not work with `allowNew`.\n   */\n  highlightOnlyResult: checkPropType(PropTypes.bool, highlightOnlyResultType),\n\n  /**\n   * An html id attribute, required for assistive technologies such as screen\n   * readers.\n   */\n  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * Whether the filter should ignore accents and other diacritical marks.\n   */\n  ignoreDiacritics: checkPropType(PropTypes.bool, ignoreDiacriticsType),\n\n  /**\n   * Props to be applied directly to the input. `onBlur`, `onChange`,\n   * `onFocus`, and `onKeyDown` are ignored.\n   */\n  inputProps: checkPropType(PropTypes.object, inputPropsType),\n\n  /**\n   * Specify the option key to use for display or a function returning the\n   * display string. By default, the selector will use the `label` key.\n   */\n  labelKey: checkPropType(PropTypes.oneOfType([PropTypes.string, PropTypes.func]), labelKeyType),\n\n  /**\n   * Maximum number of results to display by default. Mostly done for\n   * performance reasons so as not to render too many DOM nodes in the case of\n   * large data sets.\n   */\n  maxResults: PropTypes.number,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Whether or not multiple selections are allowed.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Invoked when the input is blurred. Receives an event.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Invoked whenever items are added or removed. Receives an array of the\n   * selected options.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Invoked when the input is focused. Receives an event.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Invoked when the input value changes. Receives the string value of the\n   * input.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Invoked when a key is pressed. Receives an event.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Invoked when the pagination menu item is clicked. Receives an event.\n   */\n  onPaginate: PropTypes.func,\n\n  /**\n   * Whether or not the menu should be displayed. `undefined` allows the\n   * component to control visibility, while `true` and `false` show and hide\n   * the menu, respectively.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Full set of options, including pre-selected options. Must either be an\n   * array of objects (recommended) or strings.\n   */\n  options: optionType.isRequired,\n\n  /**\n   * Give user the ability to display additional results if the number of\n   * results exceeds `maxResults`.\n   */\n  paginate: PropTypes.bool,\n\n  /**\n   * Prompt displayed when large data sets are paginated.\n   */\n  paginationText: PropTypes.string,\n\n  /**\n   * Placeholder text for the input.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The selected option(s) displayed in the input. Use this prop if you want\n   * to control the component via its parent.\n   */\n  selected: checkPropType(optionType, selectedType),\n\n  /**\n   * Allows selecting the hinted result by pressing enter.\n   */\n  selectHintOnEnter: PropTypes.bool\n};\nvar defaultProps = {\n  allowNew: false,\n  autoFocus: false,\n  caseSensitive: false,\n  defaultInputValue: '',\n  defaultOpen: false,\n  defaultSelected: [],\n  disabled: false,\n  filterBy: [],\n  highlightOnlyResult: false,\n  ignoreDiacritics: true,\n  inputProps: {},\n  labelKey: DEFAULT_LABELKEY,\n  maxResults: 100,\n  minLength: 0,\n  multiple: false,\n  onBlur: noop,\n  onFocus: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onPaginate: noop,\n  paginate: true,\n  paginationText: 'Display additional results...',\n  placeholder: '',\n  selectHintOnEnter: false\n};\n\nfunction getInitialState(props) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultOpen = props.defaultOpen,\n      defaultSelected = props.defaultSelected,\n      maxResults = props.maxResults,\n      multiple = props.multiple;\n  var selected = props.selected ? props.selected.slice() : defaultSelected.slice();\n  var text = defaultInputValue;\n\n  if (!multiple && selected.length) {\n    // Set the text if an initial selection is passed in.\n    text = getOptionLabel(head(selected), props.labelKey);\n\n    if (selected.length > 1) {\n      // Limit to 1 selection in single-select mode.\n      selected = selected.slice(0, 1);\n    }\n  }\n\n  return {\n    activeIndex: -1,\n    activeItem: null,\n    initialItem: null,\n    isFocused: false,\n    selected: selected,\n    showMenu: defaultOpen,\n    shownResults: maxResults,\n    text: text\n  };\n}\n\nvar Typeahead =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Typeahead, _React$Component);\n\n  function Typeahead() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", getInitialState(_this.props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"_referenceElement\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"blur\", function () {\n      _this.getInput().blur();\n\n      _this._hideMenu();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clear\", function () {\n      _this.setState(function (state, props) {\n        return _extends({}, getInitialState(props), {\n          isFocused: state.isFocused,\n          selected: [],\n          text: ''\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focus\", function () {\n      _this.getInput().focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInput\", function () {\n      !(_this._input instanceof HTMLInputElement) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`this._input` is not an input element. Be sure to correctly pass the ' + '`inputRef` prop to your input node.') : invariant(false) : void 0;\n      return _this._input;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleActiveIndexChange\", function (activeIndex) {\n      _this.setState(function (state) {\n        return {\n          activeIndex: activeIndex,\n          activeItem: activeIndex === -1 ? null : state.activeItem\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleActiveItemChange\", function (activeItem) {\n      // Don't update the active item if it hasn't changed.\n      if (!areEqual(activeItem, _this.state.activeItem, _this.props.labelKey)) {\n        _this.setState({\n          activeItem: activeItem\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleBlur\", function (e) {\n      e.persist();\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        return _this.props.onBlur(e);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleClear\", function () {\n      _this.clear();\n\n      _this._updateSelected([]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleFocus\", function (e) {\n      e.persist();\n\n      _this.setState({\n        isFocused: true,\n        showMenu: true\n      }, function () {\n        return _this.props.onFocus(e);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleInitialItemChange\", function (initialItem) {\n      // Don't update the initial item if it hasn't changed.\n      if (!areEqual(initialItem, _this.state.initialItem, _this.props.labelKey)) {\n        _this.setState({\n          initialItem: initialItem\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleInputChange\", function (e) {\n      e.persist();\n      var text = e.currentTarget.value;\n\n      var _getInitialState = getInitialState(_this.props),\n          activeIndex = _getInitialState.activeIndex,\n          activeItem = _getInitialState.activeItem,\n          shownResults = _getInitialState.shownResults;\n\n      var _this$props = _this.props,\n          multiple = _this$props.multiple,\n          onInputChange = _this$props.onInputChange;\n\n      _this.setState({\n        activeIndex: activeIndex,\n        activeItem: activeItem,\n        showMenu: true,\n        shownResults: shownResults,\n        text: text\n      }, function () {\n        return onInputChange(text, e);\n      }); // Clear any selections if text is entered in single-select mode.\n\n\n      if (_this.state.selected.length && !multiple) {\n        _this._updateSelected([]);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleKeyDown\", function (e, results, isMenuShown) {\n      var activeItem = _this.state.activeItem; // Skip most actions when the menu is hidden.\n\n      if (!isMenuShown) {\n        if (e.keyCode === UP || e.keyCode === DOWN) {\n          _this._showMenu();\n        }\n\n        _this.props.onKeyDown(e);\n\n        return;\n      }\n\n      switch (e.keyCode) {\n        case UP:\n        case DOWN:\n          // Prevent input cursor from going to the beginning when pressing up.\n          e.preventDefault();\n\n          _this._handleActiveIndexChange(getUpdatedActiveIndex(_this.state.activeIndex, e.keyCode, results));\n\n          break;\n\n        case ESC:\n          isMenuShown && _this._hideMenu();\n          break;\n\n        case RETURN:\n          // Prevent form submission while menu is open.\n          e.preventDefault();\n          activeItem && _this._handleMenuItemSelect(activeItem, e);\n          break;\n\n        case RIGHT:\n        case TAB:\n          if (activeItem && !activeItem.paginationOption) {\n            // Prevent blurring when selecting the active item.\n            e.keyCode === TAB && e.preventDefault();\n\n            _this._handleSelectionAdd(activeItem);\n\n            break;\n          }\n\n          if (e.keyCode === TAB) {\n            _this._hideMenu();\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      _this.props.onKeyDown(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleMenuItemSelect\", function (option, e) {\n      if (option.paginationOption) {\n        _this._handlePaginate(e);\n      } else {\n        _this._handleSelectionAdd(option);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handlePaginate\", function (e) {\n      e.persist();\n\n      _this.setState(function (_ref, _ref2) {\n        var shownResults = _ref.shownResults;\n        var maxResults = _ref2.maxResults;\n        return {\n          shownResults: shownResults + maxResults\n        };\n      }, function () {\n        return _this.props.onPaginate(e, _this.state.shownResults);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleSelectionAdd\", function (selection) {\n      var _this$props2 = _this.props,\n          multiple = _this$props2.multiple,\n          labelKey = _this$props2.labelKey;\n      var selected;\n      var text;\n\n      if (multiple) {\n        // If multiple selections are allowed, add the new selection to the\n        // existing selections.\n        selected = _this.state.selected.concat(selection);\n        text = '';\n      } else {\n        // If only a single selection is allowed, replace the existing selection\n        // with the new one.\n        selected = [selection];\n        text = getOptionLabel(selection, labelKey);\n      }\n\n      _this._hideMenu();\n\n      _this.setState({\n        initialItem: selection,\n        text: text\n      }); // Text must be updated before the selection to fix #211.\n      // TODO: Find a more robust way of solving the issue.\n\n\n      _this._updateSelected(selected);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleSelectionRemove\", function (selection) {\n      var selected = _this.state.selected.filter(function (option) {\n        return !isEqual(option, selection);\n      }); // Make sure the input stays focused after the item is removed.\n\n\n      _this.focus();\n\n      _this._hideMenu();\n\n      _this._updateSelected(selected);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_hideMenu\", function () {\n      var _getInitialState2 = getInitialState(_this.props),\n          activeIndex = _getInitialState2.activeIndex,\n          activeItem = _getInitialState2.activeItem,\n          shownResults = _getInitialState2.shownResults;\n\n      _this.setState({\n        activeIndex: activeIndex,\n        activeItem: activeItem,\n        showMenu: false,\n        shownResults: shownResults\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_showMenu\", function () {\n      _this.setState({\n        showMenu: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateSelected\", function (selected) {\n      _this.setState({\n        selected: selected\n      }, function () {\n        _this.props.onChange && _this.props.onChange(selected);\n      });\n    });\n\n    return _this;\n  }\n\n  Typeahead.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var labelKey = props.labelKey,\n        multiple = props.multiple; // Truncate selections when in single-select mode.\n\n    var prevSelected = props.selected || state.selected;\n\n    if (!multiple && prevSelected.length > 1) {\n      var selected = prevSelected.slice(0, 1);\n      return {\n        selected: selected,\n        text: getOptionLabel(head(selected), labelKey)\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Typeahead.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.autoFocus && this.focus();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$props3 = this.props,\n        labelKey = _this$props3.labelKey,\n        multiple = _this$props3.multiple,\n        selected = _this$props3.selected;\n    validateSelectedPropChange(prevProps.selected, selected); // Keep `selected` state and props in sync. Use `componentDidUpdate`\n    // rather than `getDerivedStateFromProps` to compare with previous\n    // props and differentiate between externally changed selections and\n    // internally changed ones that trigger `onChange` in a controlled\n    // component, eg. passing an empty array vs. clearing a selection by\n    // deleting part of the input value.\n\n    if (isEqual(prevProps.selected, this.state.selected) && !isEqual(prevProps.selected, selected)) {\n      // Selections were changed externally, update state accordingly.\n      var text = selected && selected.length && !multiple ? getOptionLabel(head(selected), labelKey) : '';\n      this.setState({\n        selected: selected,\n        text: text\n      });\n    }\n\n    if (prevProps.multiple !== multiple) {\n      this.setState({\n        text: ''\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this; // Omit `onChange` so Flow doesn't complain.\n\n\n    var _this$props4 = this.props,\n        onChange = _this$props4.onChange,\n        otherProps = _objectWithoutPropertiesLoose(_this$props4, [\"onChange\"]);\n\n    var mergedPropsAndState = _extends({}, otherProps, this.state);\n\n    var filterBy = mergedPropsAndState.filterBy,\n        labelKey = mergedPropsAndState.labelKey,\n        minLength = mergedPropsAndState.minLength,\n        options = mergedPropsAndState.options,\n        paginate = mergedPropsAndState.paginate,\n        paginationText = mergedPropsAndState.paginationText,\n        shownResults = mergedPropsAndState.shownResults,\n        text = mergedPropsAndState.text;\n    var results = [];\n\n    if (text.length >= minLength) {\n      var cb = typeof filterBy === 'function' ? filterBy : defaultFilterBy;\n      results = options.filter(function (option) {\n        return cb(option, mergedPropsAndState);\n      });\n    } // This must come before results are truncated.\n\n\n    var shouldPaginate = paginate && results.length > shownResults; // Truncate results if necessary.\n\n    results = getTruncatedOptions(results, shownResults); // Add the custom option if necessary.\n\n    if (addCustomOption(results, mergedPropsAndState)) {\n      var _results$push;\n\n      results.push((_results$push = {\n        customOption: true,\n        id: uniqueId('new-id-')\n      }, _results$push[getStringLabelKey(labelKey)] = text, _results$push));\n    } // Add the pagination item if necessary.\n\n\n    if (shouldPaginate) {\n      var _results$push2;\n\n      results.push((_results$push2 = {}, _results$push2[getStringLabelKey(labelKey)] = paginationText, _results$push2.paginationOption = true, _results$push2));\n    } // This must come after checks for the custom option and pagination.\n\n\n    var isMenuShown = isShown(mergedPropsAndState);\n\n    var props = _extends({}, mergedPropsAndState, {\n      getReferenceElement: function getReferenceElement(element) {\n        // Use `findDOMNode` here because it's easier and less fragile than\n        // forwarding refs to the input's container.\n\n        /* eslint-disable-next-line react/no-find-dom-node */\n        _this2._referenceElement = findDOMNode(element);\n      },\n      inputRef: function inputRef(input) {\n        _this2._input = input;\n      },\n      isMenuShown: isMenuShown,\n      onActiveItemChange: this._handleActiveItemChange,\n      onAdd: this._handleSelectionAdd,\n      onBlur: this._handleBlur,\n      onChange: this._handleInputChange,\n      onClear: this._handleClear,\n      onFocus: this._handleFocus,\n      onInitialItemChange: this._handleInitialItemChange,\n      onKeyDown: function onKeyDown(e) {\n        return _this2._handleKeyDown(e, results, isMenuShown);\n      },\n      onMenuItemClick: this._handleMenuItemSelect,\n      onRemove: this._handleSelectionRemove,\n      referenceElement: this._referenceElement,\n      results: results\n    });\n\n    return React.createElement(RootCloseWrapper, {\n      disabled: this.props.open || !isMenuShown,\n      onRootClose: this._hideMenu\n    }, React.createElement(TypeaheadInner, props));\n  };\n\n  return Typeahead;\n}(React.Component);\n\n_defineProperty(Typeahead, \"propTypes\", propTypes);\n\n_defineProperty(Typeahead, \"defaultProps\", defaultProps);\n\n_defineProperty(Typeahead, \"Input\", TypeaheadInput);\n\n_defineProperty(Typeahead, \"Menu\", TypeaheadMenu);\n\nexport default Typeahead;","map":null,"metadata":{},"sourceType":"module"}