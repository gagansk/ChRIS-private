{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Tree = function () {\n  function Tree(obj) {\n    var childNodeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';\n\n    _classCallCheck(this, Tree);\n\n    this.cnt = 1;\n    this.obj = obj || _defineProperty({}, childNodeName, []);\n    this.indexes = {};\n    this.childNodeName = childNodeName;\n    this.build(this.obj);\n  }\n\n  _createClass(Tree, [{\n    key: 'build',\n    value: function build(obj) {\n      var indexes = this.indexes;\n      var startId = this.cnt;\n      var self = this;\n      var index = {\n        id: startId,\n        node: obj\n      };\n      indexes[this.cnt + ''] = index;\n      this.cnt++;\n\n      if (obj[self.childNodeName] && obj[self.childNodeName].length) {\n        walk(obj[self.childNodeName], index);\n      }\n\n      function walk(objs, parent) {\n        var children = [];\n        objs.forEach(function (obj, i) {\n          var index = {};\n          index.id = self.cnt;\n          index.node = obj;\n          if (parent) index.parent = parent.id;\n          indexes[self.cnt + ''] = index;\n          children.push(self.cnt);\n          self.cnt++;\n          if (obj[self.childNodeName] && obj[self.childNodeName].length) walk(obj[self.childNodeName], index);\n        });\n        parent[self.childNodeName] = children;\n        children.forEach(function (id, i) {\n          var index = indexes[id + ''];\n          if (i > 0) index.prev = children[i - 1];\n          if (i < children.length - 1) index.next = children[i + 1];\n        });\n      }\n\n      return index;\n    }\n  }, {\n    key: 'getIndex',\n    value: function getIndex(id) {\n      var index = this.indexes[id + ''];\n      if (index) return index;\n    }\n  }, {\n    key: 'removeIndex',\n    value: function removeIndex(index) {\n      var self = this;\n      del(index);\n\n      function del(index) {\n        delete self.indexes[index.id + ''];\n\n        if (index[self.childNodeName] && index[self.childNodeName].length) {\n          index[self.childNodeName].forEach(function (child) {\n            del(self.getIndex(child));\n          });\n        }\n      }\n    }\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var index = this.getIndex(id);\n      if (index && index.node) return index.node;\n      return null;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(id) {\n      var index = this.getIndex(id);\n      var node = this.get(id);\n      var parentIndex = this.getIndex(index.parent);\n      var parentNode = this.get(index.parent);\n      parentNode[this.childNodeName].splice(parentNode[this.childNodeName].indexOf(node), 1);\n      parentIndex[this.childNodeName].splice(parentIndex[this.childNodeName].indexOf(id), 1);\n      this.removeIndex(index);\n      this.updateChildren(parentIndex[this.childNodeName]);\n      return node;\n    }\n  }, {\n    key: 'updateChildren',\n    value: function updateChildren(children) {\n      children.forEach(function (id, i) {\n        var index = this.getIndex(id);\n        index.prev = index.next = null;\n        if (i > 0) index.prev = children[i - 1];\n        if (i < children.length - 1) index.next = children[i + 1];\n      }.bind(this));\n    }\n  }, {\n    key: 'insert',\n    value: function insert(obj, parentId, i) {\n      var parentIndex = this.getIndex(parentId);\n      var parentNode = this.get(parentId);\n      var index = this.build(obj);\n      index.parent = parentId;\n      parentNode[this.childNodeName] = parentNode[this.childNodeName] || [];\n      parentIndex[this.childNodeName] = parentIndex[this.childNodeName] || [];\n      parentNode[this.childNodeName].splice(i, 0, obj);\n      parentIndex[this.childNodeName].splice(i, 0, index.id);\n      this.updateChildren(parentIndex[this.childNodeName]);\n\n      if (parentIndex.parent) {\n        this.updateChildren(this.getIndex(parentIndex.parent)[this.childNodeName]);\n      }\n\n      return index;\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(obj, destId) {\n      var destIndex = this.getIndex(destId);\n      var parentId = destIndex.parent;\n      var i = this.getIndex(parentId)[this.childNodeName].indexOf(destId);\n      return this.insert(obj, parentId, i);\n    }\n  }, {\n    key: 'insertAfter',\n    value: function insertAfter(obj, destId) {\n      var destIndex = this.getIndex(destId);\n      var parentId = destIndex.parent;\n      var i = this.getIndex(parentId)[this.childNodeName].indexOf(destId);\n      return this.insert(obj, parentId, i + 1);\n    }\n  }, {\n    key: 'prepend',\n    value: function prepend(obj, destId) {\n      return this.insert(obj, destId, 0);\n    }\n  }, {\n    key: 'append',\n    value: function append(obj, destId) {\n      var destIndex = this.getIndex(destId);\n      destIndex[this.childNodeName] = destIndex[this.childNodeName] || [];\n      return this.insert(obj, destId, destIndex[this.childNodeName].length);\n    }\n  }]);\n\n  return Tree;\n}();\n\nmodule.exports = Tree;","map":null,"metadata":{},"sourceType":"script"}