{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport styles from '../../@patternfly/patternfly/components/Table/table.css.js';\nimport stylesGrid from '../../@patternfly/patternfly/components/Table/table-grid.css.js';\nimport { Provider } from 'reactabular-table';\nimport { DropdownPosition, DropdownDirection } from '@patternfly/react-core';\nimport { css, getModifier } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { SortByDirection } from './SortColumn';\nimport BodyCell from './BodyCell';\nimport HeaderCell from './HeaderCell';\nimport RowWrapper from './RowWrapper';\nimport BodyWrapper from './BodyWrapper';\nimport { calculateColumns } from './utils/headerUtils';\nexport var TableGridBreakpoint = {\n  grid: 'grid',\n  gridMd: 'grid-md',\n  gridLg: 'grid-lg'\n};\nexport var TableVariant = {\n  compact: 'compact'\n};\nvar propTypes = {\n  /** Table elements [Head, Body and Footer]. */\n  children: PropTypes.node,\n\n  /** Addional classes for Table. */\n  className: PropTypes.string,\n\n  /** Function called when user wants to collapse row. */\n  onCollapse: PropTypes.func,\n\n  /** Table variant, defaults to large. */\n  variant: PropTypes.oneOf(Object.values(TableVariant)),\n\n  /** Size at which table is broken into tiles. */\n  gridBreakPoint: PropTypes.oneOf(Object.values(TableGridBreakpoint)),\n\n  /** Settings for sorting, which index and direction is sorted by. */\n  sortBy: PropTypes.shape({\n    index: PropTypes.number,\n    direction: PropTypes.oneOf(Object.values(SortByDirection))\n  }),\n\n  /** Function called when user wants to select row. */\n  onSelect: PropTypes.func,\n\n  /** Function called when user wants to sort table. */\n  onSort: PropTypes.func,\n\n  /** Additional cell displayed at the end of each row with dropdown of action items. */\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    onClick: PropTypes.func,\n    title: PropTypes.node\n  })),\n\n  /** Actual rows to display in table. Either array of strings or row ojects. */\n  rows: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    cells: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.shape({\n      title: PropTypes.node\n    })])),\n    isOpen: PropTypes.bool,\n    parent: PropTypes.number,\n    props: PropTypes.any\n  }), PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    title: PropTypes.node\n  }), PropTypes.node]))])).isRequired,\n\n  /** Header cells to display in table. Either array of strings or array of string or cell object. */\n  cells: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.shape({\n    title: PropTypes.node,\n    transforms: PropTypes.arrayOf(PropTypes.func),\n    cellTransforms: PropTypes.arrayOf(PropTypes.func),\n    formatters: PropTypes.arrayOf(PropTypes.func),\n    cellFormatters: PropTypes.arrayOf(PropTypes.func)\n  })])).isRequired,\n\n  /** Aria labeled by this property collapse and select. */\n  rowLabeledBy: PropTypes.string,\n\n  /** Id prefix for expand buttons. */\n  expandId: PropTypes.string,\n\n  /** Id prefix for expanded content. */\n  contentId: PropTypes.string,\n\n  /** Position of dropdown from actions will be displayed. */\n  dropdownPosition: PropTypes.oneOf(Object.values(DropdownPosition)),\n\n  /** Direction of from actions will be displayed. */\n  dropdownDirection: PropTypes.oneOf(Object.values(DropdownDirection)),\n\n  /** Header to display above table for accessibility reasons. */\n  header: function header(props) {\n    if (!props['aria-label'] && !props.caption && !props.header) {\n      throw new Error('Specify at least one of: header, caption, aria-label');\n    }\n\n    return null;\n  },\n\n  /** Caption to display in table for accessibility reasons. */\n  caption: function caption(props) {\n    if (!props['aria-label'] && !props.caption && !props.header) {\n      throw new Error('Specify at least one of: header, caption, aria-label');\n    }\n\n    return null;\n  },\n\n  /** aria-label in table for accessibility reasons. */\n  'aria-label': function ariaLabel(props) {\n    if (!props['aria-label'] && !props.caption && !props.header) {\n      throw new Error('Specify at least one of: header, caption, aria-label');\n    }\n\n    return null;\n  }\n};\nvar defaultProps = {\n  children: null,\n  onCollapse: null,\n  className: '',\n  variant: null,\n  rowLabeledBy: 'simple-node',\n  expandId: 'expandable-toggle',\n  contentId: 'expanded-content',\n  dropdownPosition: DropdownPosition.right,\n  dropdownDirection: DropdownDirection.down,\n  gridBreakPoint: TableGridBreakpoint.gridMd\n};\nexport var TableContext = React.createContext();\n\nvar Table = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));\n\n    _this.state = {\n      headerData: []\n    };\n    _this.isSelected = _this.isSelected.bind(_this);\n    _this.areAllRowsSelected = _this.areAllRowsSelected.bind(_this);\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: 'isSelected',\n    value: function isSelected(row) {\n      return row.selected === true;\n    }\n  }, {\n    key: 'areAllRowsSelected',\n    value: function areAllRowsSelected(rows) {\n      return rows.every(this.isSelected);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          caption = _props.caption,\n          header = _props.header,\n          className = _props.className,\n          gridBreakPoint = _props.gridBreakPoint,\n          onSort = _props.onSort,\n          onSelect = _props.onSelect,\n          sortBy = _props.sortBy,\n          children = _props.children,\n          actions = _props.actions,\n          onCollapse = _props.onCollapse,\n          rowLabeledBy = _props.rowLabeledBy,\n          dropdownPosition = _props.dropdownPosition,\n          dropdownDirection = _props.dropdownDirection,\n          contentId = _props.contentId,\n          expandId = _props.expandId,\n          variant = _props.variant,\n          rows = _props.rows,\n          cells = _props.cells,\n          props = _objectWithoutProperties(_props, ['caption', 'header', 'className', 'gridBreakPoint', 'onSort', 'onSelect', 'sortBy', 'children', 'actions', 'onCollapse', 'rowLabeledBy', 'dropdownPosition', 'dropdownDirection', 'contentId', 'expandId', 'variant', 'rows', 'cells']);\n\n      var headerData = calculateColumns(cells, {\n        sortBy: sortBy,\n        onSort: onSort,\n        onSelect: onSelect,\n        allRowsSelected: onSelect ? this.areAllRowsSelected(rows) : false,\n        actions: actions,\n        onCollapse: onCollapse,\n        rowLabeledBy: rowLabeledBy,\n        expandId: expandId,\n        contentId: contentId,\n        dropdownPosition: dropdownPosition,\n        dropdownDirection: dropdownDirection\n      });\n      return React.createElement(TableContext.Provider, {\n        value: {\n          headerData: headerData,\n          rows: rows\n        }\n      }, header, React.createElement(Provider, _extends({}, props, {\n        renderers: {\n          body: {\n            wrapper: BodyWrapper,\n            row: RowWrapper,\n            cell: BodyCell\n          },\n          header: {\n            cell: HeaderCell\n          }\n        },\n        columns: headerData,\n        role: 'grid',\n        className: css(styles.table, getModifier(stylesGrid, gridBreakPoint), getModifier(styles, variant), className)\n      }), caption && React.createElement('caption', null, caption), children));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}