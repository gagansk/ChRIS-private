{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetAllFeeds),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetAllFeedsRequest),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetFeedDetails),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetFeedRequest),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleGetPluginInstances),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPluginInstances),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(feedSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { FeedActionTypes } from \"./types\";\nimport FeedModel from \"../../api/models/feed.model\";\nimport { getAllFeedsSuccess, getFeedDetailsSuccess, getPluginInstanceListRequest, getPluginInstanceListSuccess } from \"./actions\"; // ------------------------------------------------------------------------\n// Description: Get Feeds list and search list\n// pass it a param and do a search querie\n// ------------------------------------------------------------------------\n\nfunction handleGetAllFeeds(action) {\n  var url, res;\n  return _regeneratorRuntime.wrap(function handleGetAllFeeds$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          url = !!action.payload ? \"\".concat(process.env.REACT_APP_CHRIS_UI_URL, \"search/?name=\").concat(action.payload) : \"\".concat(process.env.REACT_APP_CHRIS_UI_URL);\n          _context.next = 4;\n          return call(FeedModel.fetchRequest, url);\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.error) {\n            _context.next = 9;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context.next = 11;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put(getAllFeedsSuccess(res));\n\n        case 11:\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetAllFeedsRequest() {\n  return _regeneratorRuntime.wrap(function watchGetAllFeedsRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(FeedActionTypes.GET_ALL_FEEDS, handleGetAllFeeds);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // ------------------------------------------------------------------------\n// Description: Get Feed's details\n// ------------------------------------------------------------------------\n// const url = `${process.env.REACT_APP_CHRIS_UI_URL}`; // process.env.REACT_APP_CHRIS_UI_URL || ''; //\"https://localhost:8000/api/v1/\"\n\n\nfunction handleGetFeedDetails(action) {\n  var res, url;\n  return _regeneratorRuntime.wrap(function handleGetFeedDetails$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(FeedModel.getFeed, action.payload);\n\n        case 3:\n          res = _context3.sent;\n\n          if (!res.error) {\n            _context3.next = 8;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.next = 10;\n          return put(getFeedDetailsSuccess(res.data));\n\n        case 10:\n          url = res.data.plugin_instances;\n          _context3.next = 13;\n          return put(getPluginInstanceListRequest(url));\n\n        case 13:\n          _context3.next = 18;\n          break;\n\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 15]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetFeedRequest() {\n  return _regeneratorRuntime.wrap(function watchGetFeedRequest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(FeedActionTypes.GET_FEED_DETAILS, handleGetFeedDetails);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // ------------------------------------------------------------------------\n// Description: Get Plugin instances\n// ------------------------------------------------------------------------\n\n\nfunction handleGetPluginInstances(action) {\n  var res;\n  return _regeneratorRuntime.wrap(function handleGetPluginInstances$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(FeedModel.fetchRequest, action.payload);\n\n        case 3:\n          res = _context5.sent;\n\n          if (!res.error) {\n            _context5.next = 8;\n            break;\n          }\n\n          // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n          console.error(res.error); // working user messaging\n\n          _context5.next = 10;\n          break;\n\n        case 8:\n          _context5.next = 10;\n          return put(getPluginInstanceListSuccess(res));\n\n        case 10:\n          _context5.next = 15;\n          break;\n\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0); // working user messaging\n          // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n          //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 12]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchGetPluginInstances() {\n  return _regeneratorRuntime.wrap(function watchGetPluginInstances$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(FeedActionTypes.GET_PLUGIN_INSTANCES, handleGetPluginInstances);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // ------------------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\n\n\nexport function feedSaga() {\n  return _regeneratorRuntime.wrap(function feedSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchGetAllFeedsRequest), fork(watchGetFeedRequest), fork(watchGetPluginInstances)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/store/feed/saga.ts"],"names":["handleGetAllFeeds","watchGetAllFeedsRequest","handleGetFeedDetails","watchGetFeedRequest","handleGetPluginInstances","watchGetPluginInstances","feedSaga","all","call","fork","put","takeEvery","FeedActionTypes","FeedModel","getAllFeedsSuccess","getFeedDetailsSuccess","getPluginInstanceListRequest","getPluginInstanceListSuccess","action","url","payload","process","env","REACT_APP_CHRIS_UI_URL","fetchRequest","res","error","console","GET_ALL_FEEDS","getFeed","data","plugin_instances","GET_FEED_DETAILS","GET_PLUGIN_INSTANCES"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { FeedActionTypes } from \"./types\";\nimport FeedModel from \"../../api/models/feed.model\";\nimport {\n  getAllFeedsSuccess,\n  getFeedDetailsSuccess,\n  getPluginInstanceListRequest,\n  getPluginInstanceListSuccess\n} from \"./actions\";\n\n// ------------------------------------------------------------------------\n// Description: Get Feeds list and search list\n// pass it a param and do a search querie\n// ------------------------------------------------------------------------\nfunction* handleGetAllFeeds(action: any) {\n  try {\n    const url =  !!action.payload ? `${process.env.REACT_APP_CHRIS_UI_URL}search/?name=${action.payload}` : `${process.env.REACT_APP_CHRIS_UI_URL}`;\n    const res = yield call(FeedModel.fetchRequest, url);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getAllFeedsSuccess(res));\n      // yield put(managerOnCompleteRequest()); // no need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetAllFeedsRequest() {\n  yield takeEvery(FeedActionTypes.GET_ALL_FEEDS, handleGetAllFeeds);\n}\n\n// ------------------------------------------------------------------------\n// Description: Get Feed's details\n// ------------------------------------------------------------------------\n// const url = `${process.env.REACT_APP_CHRIS_UI_URL}`; // process.env.REACT_APP_CHRIS_UI_URL || ''; //\"https://localhost:8000/api/v1/\"\nfunction* handleGetFeedDetails(action: any) {\n  try {\n    const res = yield call(FeedModel.getFeed, action.payload);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getFeedDetailsSuccess(res.data));\n      const url = res.data.plugin_instances;\n      yield put(getPluginInstanceListRequest(url)); // Note: Call the plugin instance pass it all in one state call\n      // yield put(managerOnCompleteRequest()); // no need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetFeedRequest() {\n  yield takeEvery(FeedActionTypes.GET_FEED_DETAILS, handleGetFeedDetails);\n}\n\n// ------------------------------------------------------------------------\n// Description: Get Plugin instances\n// ------------------------------------------------------------------------\nfunction* handleGetPluginInstances(action: any) {\n  try {\n    const res = yield call(FeedModel.fetchRequest, action.payload);\n    if (res.error) {\n      // yield put(handleUIMessage({ message: res.error, type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n      console.error(res.error); // working user messaging\n    } else {\n      yield put(getPluginInstanceListSuccess(res));\n      // yield put(managerOnCompleteRequest()); // nO need for messaging just loading false\n    }\n  } catch (error) {\n    console.error(error); // working user messaging\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchGetPluginInstances() {\n  yield takeEvery(\n    FeedActionTypes.GET_PLUGIN_INSTANCES,\n    handleGetPluginInstances\n  );\n}\n\n// ------------------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* feedSaga() {\n  yield all([\n    fork(watchGetAllFeedsRequest),\n    fork(watchGetFeedRequest),\n    fork(watchGetPluginInstances)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}