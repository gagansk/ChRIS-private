{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport tippy from 'tippy.js';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nvar REACT_ONLY_PROPS = ['children', 'onCreate', 'isVisible', 'isEnabled']; // Avoid Babel's large '_objectWithoutProperties' helper function.\n\nfunction getNativeTippyProps(props) {\n  return Object.keys(props).reduce(function (acc, key) {\n    if (REACT_ONLY_PROPS.indexOf(key) === -1) {\n      acc[key] = props[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nvar Tippy =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tippy, _React$Component);\n\n  function Tippy() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tippy);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tippy)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isMounted: false\n    };\n    _this.container = typeof document !== 'undefined' && document.createElement('div');\n    return _this;\n  }\n\n  _createClass(Tippy, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isMounted: true\n      });\n      this.tip = tippy.one(ReactDOM.findDOMNode(this), this.options);\n      var _this$props = this.props,\n          onCreate = _this$props.onCreate,\n          isEnabled = _this$props.isEnabled,\n          isVisible = _this$props.isVisible;\n\n      if (onCreate) {\n        onCreate(this.tip);\n      }\n\n      if (isEnabled === false) {\n        this.tip.disable();\n      }\n\n      if (this.isManualTrigger && isVisible === true) {\n        this.tip.show();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.tip.set(this.options);\n      var _this$props2 = this.props,\n          isEnabled = _this$props2.isEnabled,\n          isVisible = _this$props2.isVisible;\n\n      if (isEnabled === true) {\n        this.tip.enable();\n      }\n\n      if (isEnabled === false) {\n        this.tip.disable();\n      }\n\n      if (this.isManualTrigger) {\n        if (isVisible === true) {\n          this.tip.show();\n        }\n\n        if (isVisible === false) {\n          this.tip.hide();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.tip.destroy();\n      this.tip = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, this.props.children, this.isReactElementContent && this.state.isMounted && ReactDOM.createPortal(this.props.content, this.container));\n    }\n  }, {\n    key: \"isReactElementContent\",\n    get: function get() {\n      return React.isValidElement(this.props.content);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return _extends({}, getNativeTippyProps(this.props), {\n        content: this.isReactElementContent ? this.container : this.props.content\n      });\n    }\n  }, {\n    key: \"isManualTrigger\",\n    get: function get() {\n      return this.props.trigger === 'manual';\n    }\n  }]);\n\n  return Tippy;\n}(React.Component);\n\nTippy.propTypes = {\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  children: PropTypes.element.isRequired,\n  onCreate: PropTypes.func,\n  isVisible: PropTypes.bool,\n  isEnabled: PropTypes.bool\n};\nexport default Tippy;","map":null,"metadata":{},"sourceType":"module"}