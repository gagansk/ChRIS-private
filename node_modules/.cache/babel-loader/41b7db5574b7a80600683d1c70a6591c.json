{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Nav/nav.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { NavContext } from './Nav';\nvar propTypes = {\n  /** Content rendered inside the nav item */\n  children: PropTypes.node,\n\n  /** Additional classes added to the nav item */\n  className: PropTypes.string,\n\n  /** Target navigation link */\n  to: PropTypes.string,\n\n  /** Flag indicating whether the item is active */\n  isActive: PropTypes.bool,\n\n  /** Flag indicating whether the item has a horizontal separator below */\n  isSeparated: PropTypes.bool,\n\n  /** Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  groupId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Item identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  itemId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** If true prevents the default anchor link action to occur. Set to true if you want to handle navigation yourself. */\n  preventDefault: PropTypes.bool,\n\n  /** Callback for item click */\n  onClick: PropTypes.func,\n\n  /** Additional props are spread to the container <a> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: '',\n  to: '',\n  isActive: false,\n  isSeparated: false,\n  groupId: null,\n  itemId: null,\n  preventDefault: false,\n  onClick: null\n};\n\nvar NavItem = function NavItem(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      to = _ref.to,\n      isActive = _ref.isActive,\n      isSeparated = _ref.isSeparated,\n      groupId = _ref.groupId,\n      itemId = _ref.itemId,\n      preventDefault = _ref.preventDefault,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"children\", \"to\", \"isActive\", \"isSeparated\", \"groupId\", \"itemId\", \"preventDefault\", \"onClick\"]);\n\n  var defaultLink = React.createElement(NavContext.Consumer, null, function (context) {\n    return React.createElement(\"a\", _extends({\n      href: to,\n      onClick: function onClick(e) {\n        return context.onSelect(e, groupId, itemId, to, preventDefault, _onClick);\n      },\n      className: css(styles.navLink, isActive && styles.modifiers.current, isSeparated && styles.modifiers.separator, className),\n      \"aria-current\": isActive ? 'page' : null\n    }, rest), children);\n  });\n  var reactElement = React.isValidElement(children);\n  var clonedChild = React.createElement(NavContext.Consumer, null, function (context) {\n    return React.cloneElement(children, {\n      onClick: function onClick(e) {\n        return context.onSelect(e, groupId, itemId, to, preventDefault, _onClick);\n      },\n      className: css(styles.navLink, isActive && styles.modifiers.current, isSeparated && styles.modifiers.separator, className),\n      'aria-current': isActive ? 'page' : null\n    });\n  });\n  return React.createElement(\"li\", {\n    className: css(styles.navItem, className)\n  }, reactElement ? clonedChild : defaultLink);\n};\n\nNavItem.propTypes = propTypes;\nNavItem.defaultProps = defaultProps;\nNavItem.componentType = 'NavItem';\nexport default NavItem;","map":null,"metadata":{},"sourceType":"module"}