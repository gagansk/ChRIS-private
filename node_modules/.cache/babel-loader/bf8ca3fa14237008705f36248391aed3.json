{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/pipeline/NodeDetails.tsx\";\nimport React from \"react\";\nimport { Button, Grid, GridItem } from \"@patternfly/react-core\";\nimport { ShareAltIcon, InfrastructureIcon } from \"@patternfly/react-icons\";\nimport TreeNodeModel from \"../../api/models/tree-node.model\";\nimport PipelineTree from \"./PipelineTree\";\n\nvar NodeDetails =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NodeDetails, _React$Component);\n\n  function NodeDetails() {\n    _classCallCheck(this, NodeDetails);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NodeDetails).apply(this, arguments));\n  }\n\n  _createClass(NodeDetails, [{\n    key: \"handleSharePipeline\",\n    // Description: Share pipeline with others ***** Working\n    value: function handleSharePipeline() {} // Stub - To be done\n    // Description: Add new node to the feed ***** Working\n\n  }, {\n    key: \"handleAddNewNode\",\n    value: function handleAddNewNode() {} // Stub - To be done\n    // Description: root node or leaf nodes in the graph will not have the 'share this pipeline' button\n    // Find out from descendants if this node is a leaf or root node\n\n  }, {\n    key: \"isNodePipelineRoot\",\n    value: function isNodePipelineRoot(item) {\n      var descendants = this.props.descendants;\n      return !TreeNodeModel.isRootNode(item) && !TreeNodeModel.isLeafNode(item, descendants);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          selected = _this$props.selected,\n          descendants = _this$props.descendants;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"capitalize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Selected Node:\"), \" \", selected.plugin_name), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(GridItem, {\n        className: \"pf-u-p-sm\",\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(PipelineTree, {\n        items: descendants,\n        selected: selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })), React.createElement(GridItem, {\n        className: \"pf-u-p-sm\",\n        sm: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"From this node:\"), React.createElement(\"div\", {\n        className: \"btn-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"tertiary\",\n        isBlock: true,\n        onClick: this.handleAddNewNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(InfrastructureIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), \" Add new node(s)...\"), this.isNodePipelineRoot(selected) && React.createElement(Button, {\n        variant: \"tertiary\",\n        isBlock: true,\n        onClick: this.handleSharePipeline,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(ShareAltIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), \" Share this pipeline...\")))));\n    }\n  }]);\n\n  return NodeDetails;\n}(React.Component);\n\nexport default NodeDetails;","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/pipeline/NodeDetails.tsx"],"names":["React","Button","Grid","GridItem","ShareAltIcon","InfrastructureIcon","TreeNodeModel","PipelineTree","NodeDetails","item","descendants","props","isRootNode","isLeafNode","selected","plugin_name","handleAddNewNode","isNodePipelineRoot","handleSharePipeline","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,wBAAvC;AACA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,yBAAjD;AACA,OAAOC,aAAP,MAAqC,kCAArC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAMMC,W;;;;;;;;;;;;;AACJ;0CACsB,CAErB,C,CADC;AAGF;;;;uCACmB,CAElB,C,CADC;AAGF;AACA;;;;uCACmBC,I,EAAoB;AAAA,UAC7BC,WAD6B,GACb,KAAKC,KADQ,CAC7BD,WAD6B;AAErC,aAAQ,CAACJ,aAAa,CAACM,UAAd,CAAyBH,IAAzB,CAAD,IAAmC,CAACH,aAAa,CAACO,UAAd,CAAyBJ,IAAzB,EAA+BC,WAA/B,CAA5C;AACD;;;6BAEQ;AAAA,wBAC2B,KAAKC,KADhC;AAAA,UACCG,QADD,eACCA,QADD;AAAA,UACWJ,WADX,eACWA,WADX;AAEP,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,OACiCI,QAAQ,CAACC,WAD1C,CADF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,WAApB;AAAgC,QAAA,EAAE,EAAE,EAApC;AAAwC,QAAA,EAAE,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEL,WAArB;AAAkC,QAAA,QAAQ,EAAEI,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,WAApB;AAAgC,QAAA,EAAE,EAAE,EAApC;AAAwC,QAAA,EAAE,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,OAAO,MAFT;AAGE,QAAA,OAAO,EAAE,KAAKE,gBAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,wBADF,EAQI,KAAKC,kBAAL,CAAwBH,QAAxB,KACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,UAAhB;AAA2B,QAAA,OAAO,MAAlC;AAAmC,QAAA,OAAO,EAAE,KAAKI,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,4BATN,CAFF,CAJF,CAJF,CADF;AA8BD;;;;EAlDuBlB,KAAK,CAACmB,S;;AAqDhC,eAAeX,WAAf","sourcesContent":["import React from \"react\";\nimport { IPluginItem } from \"../../api/models/pluginInstance.model\";\nimport { Button, Grid, GridItem } from \"@patternfly/react-core\";\nimport { ShareAltIcon, InfrastructureIcon } from \"@patternfly/react-icons\";\nimport TreeNodeModel, { INode } from \"../../api/models/tree-node.model\";\nimport PipelineTree from \"./PipelineTree\";\ninterface INodeProps {\n  selected: IPluginItem;\n  descendants: IPluginItem[];\n}\n\nclass NodeDetails extends React.Component<INodeProps> {\n  // Description: Share pipeline with others ***** Working\n  handleSharePipeline() {\n    // Stub - To be done\n  }\n\n  // Description: Add new node to the feed ***** Working\n  handleAddNewNode() {\n    // Stub - To be done\n  }\n\n  // Description: root node or leaf nodes in the graph will not have the 'share this pipeline' button\n  // Find out from descendants if this node is a leaf or root node\n  isNodePipelineRoot(item: IPluginItem ) {\n    const { descendants } = this.props;\n    return (!TreeNodeModel.isRootNode(item) && !TreeNodeModel.isLeafNode(item, descendants));\n  }\n\n  render() {\n    const { selected, descendants } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"capitalize\">\n          <label>Selected Node:</label> {selected.plugin_name}\n        </div>\n        <Grid>\n          <GridItem className=\"pf-u-p-sm\" sm={12} md={6}>\n            <PipelineTree items={descendants} selected={selected} />\n          </GridItem>\n          <GridItem className=\"pf-u-p-sm\" sm={12} md={6}>\n            <label>From this node:</label>\n            <div className=\"btn-div\">\n              <Button\n                variant=\"tertiary\"\n                isBlock\n                onClick={this.handleAddNewNode} >\n                <InfrastructureIcon /> Add new node(s)...\n              </Button>\n              {\n                this.isNodePipelineRoot(selected) && (\n                  <Button variant=\"tertiary\" isBlock onClick={this.handleSharePipeline}>\n                    <ShareAltIcon /> Share this pipeline...\n                  </Button>\n                )\n              }\n            </div>\n          </GridItem>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NodeDetails;\n"]},"metadata":{},"sourceType":"module"}