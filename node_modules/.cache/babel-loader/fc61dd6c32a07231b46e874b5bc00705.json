{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/containers/layout/Toolbar.tsx\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { onDropdownSelect as _onDropdownSelect, onKebabDropdownSelect as _onKebabDropdownSelect } from \"../../store/ui/actions\";\nimport { setUserLogout as _setUserLogout } from \"../../store/user/actions\";\nimport { Button, ButtonVariant, Dropdown, DropdownItem, DropdownToggle, KebabToggle, Toolbar, ToolbarGroup, ToolbarItem } from \"@patternfly/react-core\";\nimport { pf4UtilityStyles } from \"../../lib/pf4-styleguides\";\nimport { BellIcon, CogIcon } from \"@patternfly/react-icons\";\n\nvar ToolbarComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToolbarComponent, _React$Component);\n\n  function ToolbarComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ToolbarComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToolbarComponent).call(this, props));\n\n    _this.onDropdownToggle = function (isOpened) {\n      var onDropdownSelect = _this.props.onDropdownSelect;\n      onDropdownSelect(isOpened);\n    };\n\n    _this.onDropdownSelect = function (event) {\n      var _this$props = _this.props,\n          onDropdownSelect = _this$props.onDropdownSelect,\n          isDropdownOpen = _this$props.isDropdownOpen;\n      !!isDropdownOpen && onDropdownSelect(!isDropdownOpen); // NOTES: Toggle menu ****** to be determined, depending on actions (duplicate call for right now - stub)\n    };\n\n    _this.onKebabDropdownToggle = function (isOpened) {\n      var onKebabDropdownSelect = _this.props.onKebabDropdownSelect;\n      onKebabDropdownSelect(isOpened);\n    };\n\n    _this.onKebabDropdownSelect = function (event) {\n      var _this$props2 = _this.props,\n          onKebabDropdownSelect = _this$props2.onKebabDropdownSelect,\n          isKebabDropdownOpen = _this$props2.isKebabDropdownOpen;\n      !!isKebabDropdownOpen && onKebabDropdownSelect(isKebabDropdownOpen); // NOTES: Toggle menu ****** to be determined, depending on actions (duplicate call for right now - stub)\n    };\n\n    _this.onLogout = _this.onLogout.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ToolbarComponent, [{\n    key: \"onLogout\",\n    // Description: Logout user\n    value: function onLogout() {\n      this.props.setUserLogout();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isDropdownOpen = _this$props3.isDropdownOpen,\n          isKebabDropdownOpen = _this$props3.isKebabDropdownOpen,\n          username = _this$props3.username;\n      var kebabDropdownItems = [React.createElement(DropdownItem, {\n        key: \"kebab1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(BellIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), \" Notifications\"), React.createElement(DropdownItem, {\n        key: \"kebab2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CogIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), \" Settings\")];\n      var userDropdownItems = [React.createElement(DropdownItem, {\n        key: \"dd1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Link 1\"), React.createElement(DropdownItem, {\n        key: \"dd2\",\n        component: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Link 2\"), React.createElement(DropdownItem, {\n        key: \"dd3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Link 3\"), React.createElement(DropdownItem, {\n        key: \"dd4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Link 4\"), React.createElement(DropdownItem, {\n        key: \"dd5\",\n        component: \"a\",\n        onClick: this.onLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Sign out\")];\n      return React.createElement(Toolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(ToolbarGroup, {\n        className: \"\".concat(pf4UtilityStyles.accessibleStyles.screenReader, \" \").concat(pf4UtilityStyles.accessibleStyles.visibleOnLg),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(ToolbarItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"expanded-example-uid-01\",\n        \"aria-label\": \"Notifications actions\",\n        variant: ButtonVariant.plain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(BellIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))), React.createElement(ToolbarItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"expanded-example-uid-02\",\n        \"aria-label\": \"Settings actions\",\n        variant: ButtonVariant.plain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(CogIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })))), React.createElement(ToolbarGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(ToolbarItem, {\n        className: \"\".concat(pf4UtilityStyles.accessibleStyles.hiddenOnLg, \" \").concat(pf4UtilityStyles.spacingStyles.mr_0),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        isPlain: true,\n        position: \"right\",\n        onSelect: this.onKebabDropdownSelect,\n        toggle: React.createElement(KebabToggle, {\n          onToggle: this.onKebabDropdownToggle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }),\n        isOpen: isKebabDropdownOpen,\n        dropdownItems: kebabDropdownItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      })), React.createElement(ToolbarItem, {\n        className: \"\".concat(pf4UtilityStyles.accessibleStyles.screenReader, \" \").concat(pf4UtilityStyles.accessibleStyles.visibleOnMd),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        isPlain: true,\n        position: \"right\",\n        onSelect: this.onDropdownSelect,\n        isOpen: isDropdownOpen,\n        toggle: React.createElement(DropdownToggle, {\n          onToggle: this.onDropdownToggle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, username),\n        dropdownItems: userDropdownItems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ToolbarComponent;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onDropdownSelect: function onDropdownSelect(isOpened) {\n      return dispatch(_onDropdownSelect(isOpened));\n    },\n    onKebabDropdownSelect: function onKebabDropdownSelect(isOpened) {\n      return dispatch(_onKebabDropdownSelect(isOpened));\n    },\n    setUserLogout: function setUserLogout() {\n      return dispatch(_setUserLogout());\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var ui = _ref.ui,\n      user = _ref.user;\n  return {\n    isDropdownOpen: ui.isDropdownOpen,\n    isKebabDropdownOpen: ui.isKebabDropdownOpen,\n    username: user.username\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarComponent);","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/containers/layout/Toolbar.tsx"],"names":["React","connect","onDropdownSelect","onKebabDropdownSelect","setUserLogout","Button","ButtonVariant","Dropdown","DropdownItem","DropdownToggle","KebabToggle","Toolbar","ToolbarGroup","ToolbarItem","pf4UtilityStyles","BellIcon","CogIcon","ToolbarComponent","props","onDropdownToggle","isOpened","event","isDropdownOpen","onKebabDropdownToggle","isKebabDropdownOpen","onLogout","bind","username","kebabDropdownItems","userDropdownItems","accessibleStyles","screenReader","visibleOnLg","plain","hiddenOnLg","spacingStyles","mr_0","visibleOnMd","Component","mapDispatchToProps","dispatch","mapStateToProps","ui","user"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { ApplicationState } from \"../../store/root/applicationState\";\nimport { IUiState } from \"../../store/ui/types\";\nimport { IUserState } from \"../../store/user/types\";\nimport {\n  onDropdownSelect,\n  onKebabDropdownSelect\n} from \"../../store/ui/actions\";\nimport { setUserLogout } from \"../../store/user/actions\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  KebabToggle,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from \"@patternfly/react-core\";\nimport { pf4UtilityStyles } from \"../../lib/pf4-styleguides\";\nimport { BellIcon, CogIcon } from \"@patternfly/react-icons\";\n\ninterface IPropsFromDispatch {\n  onDropdownSelect: typeof onDropdownSelect;\n  onKebabDropdownSelect: typeof onKebabDropdownSelect;\n  setUserLogout: typeof setUserLogout;\n}\ntype AllProps = IUserState & IUiState & IPropsFromDispatch;\n\nclass ToolbarComponent extends React.Component<AllProps> {\n  constructor(props: AllProps) {\n    super(props);\n    this.onLogout = this.onLogout.bind(this);\n  }\n  onDropdownToggle = (isOpened: boolean) => {\n    const { onDropdownSelect } = this.props;\n    onDropdownSelect(isOpened);\n  }\n\n  onDropdownSelect = (event: React.SyntheticEvent<HTMLDivElement>) => {\n    const { onDropdownSelect, isDropdownOpen } = this.props;\n    !!isDropdownOpen && onDropdownSelect(!isDropdownOpen); // NOTES: Toggle menu ****** to be determined, depending on actions (duplicate call for right now - stub)\n  }\n\n  onKebabDropdownToggle = (isOpened: boolean) => {\n    const { onKebabDropdownSelect } = this.props;\n    onKebabDropdownSelect(isOpened);\n  }\n\n  onKebabDropdownSelect = (event: React.SyntheticEvent<HTMLDivElement>) => {\n    const { onKebabDropdownSelect, isKebabDropdownOpen } = this.props;\n    !!isKebabDropdownOpen && onKebabDropdownSelect(isKebabDropdownOpen); // NOTES: Toggle menu ****** to be determined, depending on actions (duplicate call for right now - stub)\n  }\n\n  // Description: Logout user\n  onLogout() {\n    this.props.setUserLogout();\n  }\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, username } = this.props;\n    const kebabDropdownItems = [\n      <DropdownItem key=\"kebab1\">\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem key=\"kebab2\">\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n\n    const userDropdownItems = [\n      <DropdownItem key=\"dd1\">Link 1</DropdownItem>,\n      <DropdownItem key=\"dd2\" component=\"a\">\n        Link 2\n      </DropdownItem>,\n      <DropdownItem key=\"dd3\">Link 3</DropdownItem>,\n      <DropdownItem key=\"dd4\">Link 4</DropdownItem>,\n      <DropdownItem key=\"dd5\" component=\"a\" onClick={this.onLogout}>\n        Sign out\n      </DropdownItem>\n    ];\n    return (\n      <Toolbar>\n        <ToolbarGroup\n          className={`${pf4UtilityStyles.accessibleStyles.screenReader} ${\n            pf4UtilityStyles.accessibleStyles.visibleOnLg\n          }`}\n        >\n          <ToolbarItem>\n            <Button\n              id=\"expanded-example-uid-01\"\n              aria-label=\"Notifications actions\"\n              variant={ButtonVariant.plain}\n            >\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button\n              id=\"expanded-example-uid-02\"\n              aria-label=\"Settings actions\"\n              variant={ButtonVariant.plain}\n            >\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem\n            className={`${pf4UtilityStyles.accessibleStyles.hiddenOnLg} ${\n              pf4UtilityStyles.spacingStyles.mr_0\n            }`}\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem\n            className={`${pf4UtilityStyles.accessibleStyles.screenReader} ${\n              pf4UtilityStyles.accessibleStyles.visibleOnMd\n            }`}\n          >\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={\n                <DropdownToggle onToggle={this.onDropdownToggle}>\n                  {username}\n                </DropdownToggle>\n              }\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onDropdownSelect: (isOpened: boolean) => dispatch(onDropdownSelect(isOpened)),\n  onKebabDropdownSelect: (isOpened: boolean) =>\n    dispatch(onKebabDropdownSelect(isOpened)),\n  setUserLogout: () => dispatch(setUserLogout())\n});\n\nconst mapStateToProps = ({ ui, user }: ApplicationState) => ({\n  isDropdownOpen: ui.isDropdownOpen,\n  isKebabDropdownOpen: ui.isKebabDropdownOpen,\n  username: user.username\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ToolbarComponent);\n"]},"metadata":{},"sourceType":"module"}