{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from \"../../@patternfly/patternfly/components/Form/form.css.js\";\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { FormContext } from '../Form/FormContext';\nimport { css, getModifier } from '@patternfly/react-styles';\nvar propTypes = {\n  /** Anything that can be rendered as FormGroup content. */\n  children: PropTypes.node,\n\n  /** Additional classes added to the FormGroup. */\n  className: PropTypes.string,\n\n  /** Label text before the field. */\n  label: PropTypes.node,\n\n  /** Sets the FormGroup required. */\n  isRequired: PropTypes.bool,\n\n  /** Sets the FormGroup isValid. */\n  isValid: PropTypes.bool,\n\n  /** Sets the FormGroup isInline. */\n  isInline: PropTypes.bool,\n\n  /** Helper text after the field. It can be a simple text or an object. */\n  helperText: PropTypes.node,\n\n  /** Helper text after the field when the field is isValid. It can be a simple text or an object. */\n  helperTextInvalid: PropTypes.node,\n\n  /** ID of the included field. It has to be the same for proper working. */\n  fieldId: PropTypes.string.isRequired,\n\n  /** Additional props are spread to the container <div> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: '',\n  label: undefined,\n  isRequired: false,\n  isValid: true,\n  isInline: false,\n  helperText: undefined,\n  helperTextInvalid: undefined\n};\n\nvar FormGroup = function FormGroup(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      label = _ref.label,\n      isRequired = _ref.isRequired,\n      isValid = _ref.isValid,\n      isInline = _ref.isInline,\n      helperText = _ref.helperText,\n      helperTextInvalid = _ref.helperTextInvalid,\n      fieldId = _ref.fieldId,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"label\", \"isRequired\", \"isValid\", \"isInline\", \"helperText\", \"helperTextInvalid\", \"fieldId\"]);\n\n  return React.createElement(FormContext.Consumer, null, function (_ref2) {\n    var isHorizontal = _ref2.isHorizontal;\n    return React.createElement(\"div\", _extends({}, props, {\n      className: css(styles.formGroup, getModifier(styles, isInline && 'inline'), className)\n    }), label && React.createElement(\"label\", {\n      className: css(styles.formLabel),\n      htmlFor: fieldId\n    }, label, isRequired && React.createElement(\"span\", {\n      className: css(styles.formLabelRequired),\n      \"aria-hidden\": \"true\"\n    }, ASTERISK)), isHorizontal ? React.createElement(\"div\", {\n      className: css(styles.formHorizontalGroup)\n    }, children) : children, (isValid && helperText || !isValid && helperTextInvalid) && React.createElement(\"div\", {\n      className: css(styles.formHelperText, getModifier(styles, !isValid && 'error')),\n      id: \"\".concat(fieldId, \"-helper\"),\n      \"aria-live\": \"polite\"\n    }, isValid ? helperText : helperTextInvalid));\n  });\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;","map":null,"metadata":{},"sourceType":"module"}