{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/chart/SegmentAnalysis.tsx\";\nimport * as React from \"react\";\nimport * as c3 from \"c3\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"./chart.scss\";\n// csvData format [[segmentName1, LH1, RH1],[segmentName2, LH2, RH2]]\nvar csvData = [[\"GSFrontToMargin\", 3.12, 3.4], [\"GOrbital\", -2.0, -1.6], [\"GTemporalMiddle\", 1.0, 1.4], [\"SCentral\", 4.0, 4.4], [\"SFrontSup\", -1.5, -1.1], [\"STemporalInf\", 2.5, 2.0]];\nvar defaultLeftHemisphere = [\"leftHemisphere\", 3.12, -2.0, 2.5];\nvar defaultRightHemisphere = [\"rightHemisphere\", 3.4, -1.6, 2.0];\nvar defaultChartData = [defaultLeftHemisphere, defaultRightHemisphere];\nvar defaultSegments = [\"GSFrontToMargin\", \"GOrbital\", \"STemporalInf\"];\nvar segments = [\"GSFrontToMargin\", \"GOrbital\", \"GTemporalMiddle\", \"SCentral\", \"SFrontSup\", \"STemporalInf\"];\nvar segmentValues = [[3.12, 3.4], [-2.0, -1.6], [1.0, 1.4], [4.0, 4.4], [-1.5, -1.1], [2.5, 2.0]];\n\nvar SegmentAnalysis =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SegmentAnalysis, _React$Component);\n\n  function SegmentAnalysis(props) {\n    var _this;\n\n    _classCallCheck(this, SegmentAnalysis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentAnalysis).call(this, props));\n    _this.state = {\n      pushedSegments: []\n    };\n    _this.changeData = _this.changeData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SegmentAnalysis, [{\n    key: \"pickDefaultSegments\",\n    value: function pickDefaultSegments(segmentOffSet) {\n      var defaultLeft = [\"leftHemisphere\"];\n      var defaultRight = [\"rightHemisphere\"];\n      var defaultSegmentation = [];\n      var segmentData;\n\n      for (var i = 0; i < 2; i++) {\n        segmentData = this.getSegmentData(segmentOffSet[i][0]);\n        console.log(segmentData);\n        console.log(segmentData[0]); //defaultSegmentation.push(segmentData[0]);\n        //defaultLeft.push(segmentData[1]);\n        //defaultRight.push(segmentData[2]);\n      }\n    }\n  }, {\n    key: \"sortFunction\",\n    value: function sortFunction(a, b) {\n      if (a[1] === b[1]) {\n        return 0;\n      } else {\n        return a[1] < b[1] ? 1 : -1;\n      }\n    }\n  }, {\n    key: \"calculateOffset\",\n    value: function calculateOffset() {\n      var segmentOffSet = [];\n      var result = [];\n\n      for (var i = 0; i < segments.length; i++) {\n        segmentOffSet.push([segments[i], Math.abs(segmentValues[i][0]) + Math.abs(segmentValues[i][1])]);\n      }\n\n      result = segmentOffSet.sort(this.sortFunction);\n      this.pickDefaultSegments(result);\n      return result;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Calculate Offset\n      var result = this.calculateOffset();\n      this.callChart(defaultChartData, defaultSegments);\n    }\n  }, {\n    key: \"callChart\",\n    value: function callChart(inputChart, segments) {\n      c3.generate({\n        bindto: \"#SegmentAnalysis\",\n        data: {\n          columns: inputChart,\n          type: \"bar\",\n          colors: {\n            leftHemisphere: \"#FFA500\",\n            rightHemisphere: \"#00BFFF\"\n          }\n        },\n        axis: {\n          x: {\n            type: \"category\",\n            categories: segments\n          },\n          y: {\n            label: {\n              text: \"Deviation from Standard in %\",\n              position: \"outer-middle\"\n            }\n          }\n        },\n        grid: {\n          y: {\n            lines: [{\n              value: 0,\n              text: \"Average\",\n              position: \"start\"\n            }]\n          }\n        },\n        padding: {\n          top: 40,\n          bottom: 20,\n          right: 20\n        },\n        size: {\n          height: 500 // **** Working find the element and resize to modal\n\n        }\n      });\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(filteredData) {\n      var leftHemisphereData = [\"leftHemisphere\"];\n      var rightHemisphereData = [\"rightHemisphere\"]; // Parse for the leftHemisphereData and rightHemisphereData\n      // tslint:disable-next-line:prefer-for-of\n\n      for (var i = 0; i < filteredData.length; i++) {\n        leftHemisphereData.push(filteredData[i][1]);\n        rightHemisphereData.push(filteredData[i][2]);\n      }\n\n      return [leftHemisphereData, rightHemisphereData];\n    }\n  }, {\n    key: \"getSegmentData\",\n    value: function getSegmentData(segment) {\n      console.log(\"segment\", segment);\n      var segmentData = csvData.find(function (segmentData) {\n        return segmentData[0] === segment;\n      });\n      console.log(\"segmentData\", segmentData);\n      return segmentData;\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter() {\n      var _this2 = this;\n\n      var filteredData = [];\n      var parsedData = [];\n\n      if (this.state.pushedSegments.length > 0) {\n        filteredData = this.state.pushedSegments.map(function (segment) {\n          return _this2.getSegmentData(segment);\n        });\n      }\n\n      parsedData = this.parseData(filteredData);\n      return parsedData;\n    }\n  }, {\n    key: \"changeData\",\n    value: function changeData(selectedSegments) {\n      var _this3 = this;\n\n      // Call back function to avoid asynchronous setState\n      var processedData;\n      this.setState({\n        pushedSegments: selectedSegments\n      }, function () {\n        // Input processing\n        processedData = _this3.setFilter();\n\n        _this3.callChart(processedData, _this3.state.pushedSegments);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"chart-viewer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Typeahead, {\n        clearButton: true,\n        defaultSelected: defaultSegments,\n        id: \"selector\",\n        multiple: true,\n        options: segments,\n        placeholder: \"Choose a brain segment...\",\n        onChange: function onChange(selectedSegments) {\n          return _this4.changeData(selectedSegments);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"SegmentAnalysis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SegmentAnalysis;\n}(React.Component);\n\nexport default SegmentAnalysis;","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/components/chart/SegmentAnalysis.tsx"],"names":["React","c3","Typeahead","csvData","defaultLeftHemisphere","defaultRightHemisphere","defaultChartData","defaultSegments","segments","segmentValues","SegmentAnalysis","props","state","pushedSegments","changeData","bind","segmentOffSet","defaultLeft","defaultRight","defaultSegmentation","segmentData","i","getSegmentData","console","log","a","b","result","length","push","Math","abs","sort","sortFunction","pickDefaultSegments","calculateOffset","callChart","inputChart","generate","bindto","data","columns","type","colors","leftHemisphere","rightHemisphere","axis","x","categories","y","label","text","position","grid","lines","value","padding","top","bottom","right","size","height","filteredData","leftHemisphereData","rightHemisphereData","segment","find","parsedData","map","parseData","selectedSegments","processedData","setState","setFilter","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as c3 from \"c3\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport \"./chart.scss\";\n\ninterface ComponentProps {\n\n}\n\ninterface ComponentState {\n    pushedSegments: [];\n}\n\n// csvData format [[segmentName1, LH1, RH1],[segmentName2, LH2, RH2]]\nconst csvData = [\n  [\"GSFrontToMargin\", 3.12, 3.4],\n  [\"GOrbital\", -2.0, -1.6],\n  [\"GTemporalMiddle\", 1.0, 1.4],\n  [\"SCentral\", 4.0, 4.4],\n  [\"SFrontSup\", -1.5, -1.1],\n  [\"STemporalInf\", 2.5, 2.0]\n];\n\nconst defaultLeftHemisphere = [\"leftHemisphere\", 3.12, -2.0, 2.5];\nconst defaultRightHemisphere = [\"rightHemisphere\", 3.4, -1.6, 2.0];\nconst defaultChartData = [ defaultLeftHemisphere, defaultRightHemisphere ];\nconst defaultSegments = [\"GSFrontToMargin\", \"GOrbital\", \"STemporalInf\"];\n\nconst segments = [\"GSFrontToMargin\", \"GOrbital\", \"GTemporalMiddle\",\n                    \"SCentral\", \"SFrontSup\", \"STemporalInf\"];\nconst segmentValues = [[3.12, 3.4], [-2.0, -1.6], [1.0, 1.4],\n                          [4.0, 4.4], [-1.5, -1.1], [2.5, 2.0]];\n\nclass SegmentAnalysis extends React.Component<ComponentProps, ComponentState> {\n  constructor(props: ComponentProps) {\n    super(props);\n\n    this.state = {\n      pushedSegments: []\n    };\n\n    this.changeData = this.changeData.bind(this);\n  }\n\n  pickDefaultSegments(segmentOffSet: any) {\n    let defaultLeft = [\"leftHemisphere\"];\n    let defaultRight = [\"rightHemisphere\"];\n    let defaultSegmentation = [];\n    let segmentData;\n    for ( let i = 0; i < 2; i++ ) {\n      segmentData = this.getSegmentData(segmentOffSet[i][0]);\n      console.log(segmentData);\n      console.log(segmentData[0]);\n      //defaultSegmentation.push(segmentData[0]);\n      //defaultLeft.push(segmentData[1]);\n      //defaultRight.push(segmentData[2]);\n    }\n  }\n\n  sortFunction(a: any, b: any) {\n    if (a[1] === b[1]) {\n      return 0;\n    } else {\n      return (a[1] < b[1]) ? 1 : -1;\n    }\n  }\n\n  calculateOffset() {\n    let segmentOffSet: any[] = [];\n    let result: any[] = [];\n    for ( let i = 0; i < segments.length; i++ ) {\n      segmentOffSet.push([segments[i], Math.abs(segmentValues[i][0]) +\n                                        Math.abs(segmentValues[i][1])]);\n    }\n    result = segmentOffSet.sort(this.sortFunction);\n    this.pickDefaultSegments(result);\n    return result;\n  }\n\n  componentDidMount() {\n    //Calculate Offset\n    let result = this.calculateOffset();\n    this.callChart(defaultChartData, defaultSegments);\n  }\n\n  callChart(inputChart: any, segments: any) {\n    c3.generate({\n      bindto: \"#SegmentAnalysis\",\n      data: {\n        columns: inputChart,\n        type: \"bar\",\n        colors: {\n            leftHemisphere: \"#FFA500\",\n            rightHemisphere: \"#00BFFF\"\n        }\n      },\n      axis: {\n        x: {\n            type: \"category\",\n            categories: segments,\n        },\n        y: {\n            label: {\n                text: \"Deviation from Standard in %\",\n                position: \"outer-middle\"\n            }\n        }\n      },\n      grid: {\n        y: {\n            lines: [\n                {value: 0, text: \"Average\", position: \"start\"},\n            ]\n        }\n      },\n      padding: {\n        top: 40,\n        bottom: 20,\n        right: 20\n      },\n      size: {\n        height: 500 // **** Working find the element and resize to modal\n      }\n    });\n  }\n\n  parseData(filteredData: any) {\n    const leftHemisphereData = [\"leftHemisphere\"];\n    const rightHemisphereData = [\"rightHemisphere\"];\n    // Parse for the leftHemisphereData and rightHemisphereData\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < filteredData.length; i++) {\n      leftHemisphereData.push(filteredData[i][1]);\n      rightHemisphereData.push(filteredData[i][2]);\n    }\n    return [leftHemisphereData, rightHemisphereData];\n  }\n\n  getSegmentData(segment: any) {\n    console.log(\"segment\",segment);\n    const segmentData = csvData.find((segmentData) => {\n      return (segmentData[0] === segment);\n    });\n    console.log(\"segmentData\",segmentData);\n    return segmentData;\n  }\n\n  setFilter() {\n    let filteredData: any[] = [];\n    let parsedData: any[] = [];\n    if (this.state.pushedSegments.length > 0) {\n        filteredData = this.state.pushedSegments.map((segment) =>\n          this.getSegmentData(segment));\n    }\n    parsedData = this.parseData(filteredData);\n    return parsedData;\n  }\n\n  changeData(selectedSegments: any) {\n    // Call back function to avoid asynchronous setState\n    let processedData;\n    this.setState({\n      pushedSegments : selectedSegments\n    }, () => {\n      // Input processing\n      processedData = this.setFilter();\n      this.callChart(processedData, this.state.pushedSegments);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart-viewer\">\n        <React.Fragment>\n          <Typeahead\n            clearButton\n            defaultSelected={defaultSegments}\n            id=\"selector\"\n            multiple\n            options={segments}\n            placeholder=\"Choose a brain segment...\"\n            onChange={(selectedSegments) => this.changeData(selectedSegments)}\n          />\n        </React.Fragment>\n        <div id=\"SegmentAnalysis\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SegmentAnalysis;\n"]},"metadata":{},"sourceType":"module"}