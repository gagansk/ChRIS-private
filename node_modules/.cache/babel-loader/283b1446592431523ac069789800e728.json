{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from '@patternfly/react-styles';\nimport { AngleRightIcon } from '@patternfly/react-icons';\nimport styles from \"../../@patternfly/patternfly/components/DataList/data-list.css.js\";\nimport { Button, ButtonVariant } from '../Button';\n\nvar DataListToggle = function DataListToggle(_ref) {\n  var className = _ref.className,\n      isExpanded = _ref.isExpanded,\n      ariaControls = _ref['aria-controls'],\n      ariaLabel = _ref['aria-label'],\n      ariaLabelledBy = _ref['aria-labelledby'],\n      rowid = _ref.rowid,\n      id = _ref.id,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isExpanded\", \"aria-controls\", \"aria-label\", \"aria-labelledby\", \"rowid\", \"id\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: css(styles.dataListToggle, className)\n  }, props), React.createElement(Button, {\n    id: id,\n    variant: ButtonVariant.plain,\n    \"aria-controls\": ariaControls !== '' && ariaControls,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabel !== \"Details\" ? null : \"\".concat(rowid, \" \").concat(id),\n    \"aria-expanded\": isExpanded\n  }, React.createElement(AngleRightIcon, null)));\n};\n\nDataListToggle.propTypes = {\n  /** Additional classes added to the DataList cell */\n  className: PropTypes.string,\n\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded: PropTypes.bool,\n\n  /** Identify the DataList toggle number */\n  id: PropTypes.string.isRequired,\n\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby': PropTypes.string,\n\n  /** Adds accessible text to the DataList toggle */\n  'aria-label': PropTypes.string,\n\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls': PropTypes.string,\n\n  /** Additional props are spread to the container <div> */\n  '': PropTypes.any\n};\nDataListToggle.defaultProps = {\n  'aria-controls': '',\n  'aria-label': 'Details',\n  'aria-labelledby': '',\n  className: '',\n  isExpanded: false\n};\nexport default DataListToggle;","map":null,"metadata":{},"sourceType":"module"}