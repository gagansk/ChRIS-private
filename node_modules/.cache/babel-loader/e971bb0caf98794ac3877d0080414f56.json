{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport styles from \"../../@patternfly/patternfly/components/Select/select.css.js\";\nimport { css } from '@patternfly/react-styles';\nimport PropTypes from 'prop-types';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { KeyTypes } from './selectConstants';\nvar propTypes = {\n  /** HTML ID of dropdown toggle */\n  id: PropTypes.string.isRequired,\n\n  /** Anything which can be rendered as dropdown toggle */\n  children: PropTypes.node,\n\n  /** Classes applied to root element of dropdown toggle */\n  className: PropTypes.string,\n\n  /** Flag to indicate if select is expanded */\n  isExpanded: PropTypes.bool,\n\n  /** Callback called when toggle is clicked */\n  onToggle: PropTypes.func,\n\n  /** Callback for toggle open on keyboard entry */\n  onEnter: PropTypes.func,\n\n  /** Callback for toggle close */\n  onClose: PropTypes.func,\n\n  /** Element which wraps toggle */\n  parentRef: PropTypes.any,\n\n  /** Forces focus state */\n  isFocused: PropTypes.bool,\n\n  /** Forces hover state */\n  isHovered: PropTypes.bool,\n\n  /** Forces active state */\n  isActive: PropTypes.bool,\n\n  /** Display the toggle with no border or background */\n  isPlain: PropTypes.bool,\n\n  /** Type of the toggle button, defaults to 'button' */\n  type: PropTypes.string,\n\n  /** Additional props are spread to the container <button> */\n  '': PropTypes.any\n};\nvar defaultProps = {\n  children: null,\n  className: '',\n  isExpanded: false,\n  parentRef: null,\n  isFocused: false,\n  isHovered: false,\n  isActive: false,\n  isPlain: false,\n  type: 'button',\n  onToggle: Function.prototype,\n  onEnter: Function.prototype,\n  onClose: Function.prototype\n};\n\nvar SelectToggle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectToggle, _Component);\n\n  function SelectToggle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectToggle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectToggle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDocClick\", function (event) {\n      var _this$props = _this.props,\n          parentRef = _this$props.parentRef,\n          isExpanded = _this$props.isExpanded,\n          onToggle = _this$props.onToggle,\n          onClose = _this$props.onClose;\n\n      if (isExpanded && parentRef && !parentRef.contains(event.target)) {\n        onToggle && onToggle(false);\n        onClose && onClose();\n\n        _this.toggle.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEscPress\", function (event) {\n      var _this$props2 = _this.props,\n          parentRef = _this$props2.parentRef,\n          isExpanded = _this$props2.isExpanded,\n          onToggle = _this$props2.onToggle,\n          onClose = _this$props2.onClose;\n      if (!isExpanded && event.key === KeyTypes.Enter) _this.toggle.focus();\n\n      if (isExpanded && (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) && parentRef && parentRef.contains(event.target)) {\n        onToggle && onToggle(false);\n        onClose && onClose();\n\n        _this.toggle.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (event) {\n      var _this$props3 = _this.props,\n          isExpanded = _this$props3.isExpanded,\n          onToggle = _this$props3.onToggle,\n          onClose = _this$props3.onClose,\n          onEnter = _this$props3.onEnter;\n      if (event.key === KeyTypes.Tab && !isExpanded || event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) return;\n      event.preventDefault();\n\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isExpanded) {\n        onToggle && onToggle(!isExpanded);\n        onClose && onClose();\n\n        _this.toggle.focus();\n      } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isExpanded) {\n        onToggle(!isExpanded);\n        onEnter();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(SelectToggle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          children = _this$props4.children,\n          isExpanded = _this$props4.isExpanded,\n          isFocused = _this$props4.isFocused,\n          isActive = _this$props4.isActive,\n          isHovered = _this$props4.isHovered,\n          isPlain = _this$props4.isPlain,\n          onToggle = _this$props4.onToggle,\n          onEnter = _this$props4.onEnter,\n          onClose = _this$props4.onClose,\n          parentRef = _this$props4.parentRef,\n          id = _this$props4.id,\n          type = _this$props4.type,\n          props = _objectWithoutProperties(_this$props4, [\"className\", \"children\", \"isExpanded\", \"isFocused\", \"isActive\", \"isHovered\", \"isPlain\", \"onToggle\", \"onEnter\", \"onClose\", \"parentRef\", \"id\", \"type\"]);\n\n      return React.createElement(\"button\", _extends({}, props, {\n        id: id,\n        ref: function ref(toggle) {\n          _this2.toggle = toggle;\n        },\n        className: css(styles.selectToggle, isFocused && styles.modifiers.focus, isHovered && styles.modifiers.hover, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, className),\n        type: type,\n        onClick: function onClick(_event) {\n          onToggle && onToggle(!isExpanded);\n          if (isExpanded) onClose && onClose();\n        },\n        \"aria-expanded\": isExpanded,\n        \"aria-haspopup\": \"listbox\",\n        onKeyDown: this.onKeyDown\n      }), React.createElement(\"div\", {\n        className: css(styles.selectToggleWrapper)\n      }, React.createElement(\"span\", {\n        className: css(styles.selectToggleText)\n      }, children)), React.createElement(CaretDownIcon, {\n        className: css(styles.selectToggleArrow)\n      }));\n    }\n  }]);\n\n  return SelectToggle;\n}(Component);\n\nSelectToggle.propTypes = propTypes;\nSelectToggle.defaultProps = defaultProps;\nexport default SelectToggle;","map":null,"metadata":{},"sourceType":"module"}