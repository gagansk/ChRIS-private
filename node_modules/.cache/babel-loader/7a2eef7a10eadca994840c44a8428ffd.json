{"ast":null,"code":"import _classCallCheck from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _ from \"lodash\";\n\nvar TreeNodeModel =\n/*#__PURE__*/\nfunction () {\n  function TreeNodeModel() {\n    _classCallCheck(this, TreeNodeModel);\n  }\n\n  _createClass(TreeNodeModel, null, [{\n    key: \"isLeafNode\",\n    // Description: determines if node is leaf node\n    value: function isLeafNode(item, items) {\n      // Find a node with previous_id  === item id\n      return !!!_.find(items, function (subitem) {\n        return item.id === subitem.previous_id;\n      });\n    } // Description: determines if node is root\n\n  }, {\n    key: \"isRootNode\",\n    value: function isRootNode(item) {\n      return !(!!item.previous_id && !!item.previous);\n    } // Description: determines the total height depending on the number of rows / levels in the tree\n\n  }, {\n    key: \"calculateTotalTreeHeight\",\n    value: function calculateTotalTreeHeight(totalRows) {\n      var height = totalRows <= 1 ? 80 : Number(60 + (totalRows - 1) * 70);\n      return height;\n    }\n  }]);\n\n  return TreeNodeModel;\n}();\n\nexport { TreeNodeModel as default };","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/api/models/tree-node.model.ts"],"names":["_","TreeNodeModel","item","items","find","subitem","id","previous_id","previous","totalRows","height","Number"],"mappings":";;AAEA,OAAOA,CAAP,MAAc,QAAd;;IAiBqBC,a;;;;;;;;;AACnB;+BACkBC,I,EAAmBC,K,EAAsB;AACzD;AACA,aAAO,CAAC,CAAC,CAAEH,CAAC,CAACI,IAAF,CAAOD,KAAP,EAAc,UAACE,OAAD,EAA0B;AACjD,eAAQH,IAAI,CAACI,EAAL,KAAYD,OAAO,CAACE,WAA5B;AACD,OAFU,CAAX;AAGD,K,CAED;;;;+BACkBL,I,EAAmB;AACnC,aAAO,EAAE,CAAC,CAACA,IAAI,CAACK,WAAP,IAAsB,CAAC,CAACL,IAAI,CAACM,QAA/B,CAAP;AACD,K,CAEC;;;;6CAC8BC,S,EAA2B;AACzD,UAAMC,MAAM,GAAID,SAAS,IAAI,CAAd,GAAmB,EAAnB,GAAwBE,MAAM,CAAC,KAAM,CAACF,SAAS,GAAG,CAAb,IAAkB,EAAzB,CAA7C;AACA,aAAOC,MAAP;AACD;;;;;;SAlBkBT,a","sourcesContent":["import { chrisId } from \"./base.model\";\nimport { IPluginItem } from \"./pluginInstance.model\";\nimport _ from \"lodash\";\n\n\nexport type NodeId = chrisId | undefined;\nexport interface INode {\n  // extends cola.Node extends SVGSVGElement\n  item: IPluginItem;\n  index: number;\n  x?: number;\n  y?: number;\n  height?: number;\n  width?: number;\n  bounds?: any;\n  label?: string;\n  isRoot?: boolean;\n}\n\nexport default class TreeNodeModel {\n  // Description: determines if node is leaf node\n  static isLeafNode(item: IPluginItem, items: IPluginItem[]) {\n    // Find a node with previous_id  === item id\n    return !!!(_.find(items, (subitem: IPluginItem) => {\n      return (item.id === subitem.previous_id);\n    }));\n  }\n\n  // Description: determines if node is root\n  static isRootNode(item: IPluginItem) {\n    return !(!!item.previous_id && !!item.previous);\n  }\n\n    // Description: determines the total height depending on the number of rows / levels in the tree\n  static calculateTotalTreeHeight(totalRows: number): number {\n    const height = (totalRows <= 1) ? 80 : Number(60 + ((totalRows - 1) * 70));\n    return height;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}