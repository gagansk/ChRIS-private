{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _tree = require('./tree');\n\nvar _tree2 = _interopRequireDefault(_tree);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar UITree = function (_Component) {\n  _inherits(UITree, _Component);\n\n  function UITree(props) {\n    _classCallCheck(this, UITree);\n\n    var _this = _possibleConstructorReturn(this, (UITree.__proto__ || Object.getPrototypeOf(UITree)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.state = _this.init(props);\n    return _this;\n  }\n\n  _createClass(UITree, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this._updated) {\n        this.setState(this.init(nextProps));\n      } else {\n        this._updated = false;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var tree = this.state.tree;\n      var dragging = this.state.dragging;\n      var draggingDom = this.getDraggingDom();\n      return _react2.default.createElement('div', {\n        className: 'm-tree'\n      }, draggingDom, _react2.default.createElement(_node2.default, {\n        tree: tree,\n        index: tree.getIndex(1),\n        key: 1,\n        paddingLeft: this.props.paddingLeft,\n        onDragStart: this.dragStart,\n        onCollapse: this.toggleCollapse,\n        dragging: dragging && dragging.id\n      }));\n    } // oh\n\n  }]);\n\n  return UITree;\n}(_react.Component);\n\nUITree.propTypes = {\n  tree: _propTypes2.default.object.isRequired,\n  paddingLeft: _propTypes2.default.number,\n  renderNode: _propTypes2.default.func.isRequired\n};\nUITree.defaultProps = {\n  paddingLeft: 20\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.init = function (props) {\n    var tree = new _tree2.default(props.tree);\n    tree.isNodeCollapsed = props.isNodeCollapsed;\n    tree.renderNode = props.renderNode;\n    tree.changeNodeCollapsed = props.changeNodeCollapsed;\n    tree.updateNodesPosition();\n    return {\n      tree: tree,\n      dragging: {\n        id: null,\n        x: null,\n        y: null,\n        w: null,\n        h: null\n      }\n    };\n  };\n\n  this.getDraggingDom = function () {\n    var _state = _this2.state,\n        tree = _state.tree,\n        dragging = _state.dragging;\n\n    if (dragging && dragging.id) {\n      var draggingIndex = tree.getIndex(dragging.id);\n      var draggingStyles = {\n        top: dragging.y,\n        left: dragging.x,\n        width: dragging.w\n      };\n      return _react2.default.createElement('div', {\n        className: 'm-draggable',\n        style: draggingStyles\n      }, _react2.default.createElement(_node2.default, {\n        tree: tree,\n        index: draggingIndex,\n        paddingLeft: _this2.props.paddingLeft\n      }));\n    }\n\n    return null;\n  };\n\n  this.dragStart = function (id, dom, e) {\n    if (e.button !== 0) return;\n    _this2.dragging = {\n      id: id,\n      w: dom.offsetWidth,\n      h: dom.offsetHeight,\n      x: dom.offsetLeft,\n      y: dom.offsetTop\n    };\n    _this2._startX = dom.offsetLeft;\n    _this2._startY = dom.offsetTop;\n    _this2._offsetX = e.clientX;\n    _this2._offsetY = e.clientY;\n    _this2._start = true;\n    window.addEventListener('mousemove', _this2.drag);\n    window.addEventListener('mouseup', _this2.dragEnd);\n  };\n\n  this.drag = function (e) {\n    if (_this2._start) {\n      _this2.setState({\n        dragging: _this2.dragging\n      });\n\n      _this2._start = false;\n    }\n\n    var tree = _this2.state.tree;\n    var dragging = _this2.state.dragging;\n    var paddingLeft = _this2.props.paddingLeft;\n    var newIndex = null;\n    var index = tree.getIndex(dragging.id);\n    var collapsed = index.node.collapsed;\n    var _startX = _this2._startX;\n    var _startY = _this2._startY;\n    var _offsetX = _this2._offsetX;\n    var _offsetY = _this2._offsetY;\n    var pos = {\n      x: _startX + e.clientX - _offsetX,\n      y: _startY + e.clientY - _offsetY\n    };\n    dragging.x = pos.x;\n    dragging.y = pos.y;\n    var diffX = dragging.x - paddingLeft / 2 - (index.left - 2) * paddingLeft;\n    var diffY = dragging.y - dragging.h / 2 - (index.top - 2) * dragging.h;\n\n    if (diffX < 0) {\n      // left\n      if (index.parent && !index.next) {\n        newIndex = tree.move(index.id, index.parent, 'after');\n      }\n    } else if (diffX > paddingLeft) {\n      // right\n      if (index.prev) {\n        var prevNode = tree.getIndex(index.prev).node;\n\n        if (!prevNode.collapsed && !prevNode.leaf) {\n          newIndex = tree.move(index.id, index.prev, 'append');\n        }\n      }\n    }\n\n    if (newIndex) {\n      index = newIndex;\n      newIndex.node.collapsed = collapsed;\n      dragging.id = newIndex.id;\n    }\n\n    if (diffY < 0) {\n      // up\n      var above = tree.getNodeByTop(index.top - 1);\n      newIndex = tree.move(index.id, above.id, 'before');\n    } else if (diffY > dragging.h) {\n      // down\n      if (index.next) {\n        var below = tree.getIndex(index.next);\n\n        if (below.children && below.children.length && !below.node.collapsed) {\n          newIndex = tree.move(index.id, index.next, 'prepend');\n        } else {\n          newIndex = tree.move(index.id, index.next, 'after');\n        }\n      } else {\n        var _below = tree.getNodeByTop(index.top + index.height);\n\n        if (_below && _below.parent !== index.id) {\n          if (_below.children && _below.children.length && !_below.node.collapsed) {\n            newIndex = tree.move(index.id, _below.id, 'prepend');\n          } else {\n            newIndex = tree.move(index.id, _below.id, 'after');\n          }\n        }\n      }\n    }\n\n    if (newIndex) {\n      newIndex.node.collapsed = collapsed;\n      dragging.id = newIndex.id;\n    }\n\n    _this2.setState({\n      tree: tree,\n      dragging: dragging\n    });\n  };\n\n  this.dragEnd = function () {\n    _this2.setState({\n      dragging: {\n        id: null,\n        x: null,\n        y: null,\n        w: null,\n        h: null\n      }\n    });\n\n    _this2.change(_this2.state.tree);\n\n    window.removeEventListener('mousemove', _this2.drag);\n    window.removeEventListener('mouseup', _this2.dragEnd);\n  };\n\n  this.change = function (tree) {\n    _this2._updated = true;\n    if (_this2.props.onChange) _this2.props.onChange(tree.obj);\n  };\n\n  this.toggleCollapse = function (nodeId) {\n    var tree = _this2.state.tree;\n    var index = tree.getIndex(nodeId);\n    var node = index.node;\n    node.collapsed = !node.collapsed;\n    tree.updateNodesPosition();\n\n    _this2.setState({\n      tree: tree\n    });\n\n    _this2.change(tree);\n  };\n};\n\nmodule.exports = UITree;","map":null,"metadata":{},"sourceType":"script"}