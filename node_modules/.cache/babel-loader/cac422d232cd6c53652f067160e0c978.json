{"ast":null,"code":"import isFunction from \"lodash/isFunction\";\nimport isPlainObject from \"lodash/isPlainObject\";\nimport PropTypes from 'prop-types';\nimport warn from './utils/warn';\nvar INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\n/**\n * Allows additional warnings or messaging related to prop validation.\n */\n\nexport function checkPropType(validator, callback) {\n  return function (props, propName, componentName) {\n    var _PropTypes$checkPropT;\n\n    PropTypes.checkPropTypes((_PropTypes$checkPropT = {}, _PropTypes$checkPropT[propName] = validator, _PropTypes$checkPropT), props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props, propName, componentName) {\n  var caseSensitive = props.caseSensitive,\n      filterBy = props.filterBy;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function defaultInputValueType(props, propName, componentName) {\n  var defaultInputValue = props.defaultInputValue,\n      defaultSelected = props.defaultSelected,\n      multiple = props.multiple,\n      selected = props.selected;\n  var name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), \"`defaultInputValue` will be overridden by the value from `\" + name + \"`.\");\n}\nexport function highlightOnlyResultType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      highlightOnlyResult = props.highlightOnlyResult;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props, propName, componentName) {\n  var filterBy = props.filterBy,\n      ignoreDiacritics = props.ignoreDiacritics;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(props, propName, componentName) {\n  var inputProps = props.inputProps;\n\n  if (!(inputProps && isPlainObject(inputProps))) {\n    return;\n  } // Blacklisted properties.\n\n\n  INPUT_PROPS_BLACKLIST.forEach(function (_ref) {\n    var alt = _ref.alt,\n        prop = _ref.prop;\n    var msg = alt ? \" Use the top-level `\" + alt + \"` prop instead.\" : null;\n    warn(!inputProps[prop], \"The `\" + prop + \"` property of `inputProps` will be ignored.\" + msg);\n  });\n}\nexport function labelKeyType(props, propName, componentName) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport var optionType = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object.isRequired), PropTypes.arrayOf(PropTypes.string.isRequired)]);\nexport function selectedType(props, propName, componentName) {\n  var onChange = props.onChange,\n      selected = props.selected;\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}","map":null,"metadata":{},"sourceType":"module"}