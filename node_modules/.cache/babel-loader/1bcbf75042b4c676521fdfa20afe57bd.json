{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gakumar/Desktop/charts-private/ChRIS_ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleLogin),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoginRequest),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleLogout),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogoutRequest),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { push } from \"connected-react-router\";\nimport Client from \"@fnndsc/chrisapi\";\nimport { UserActionTypes } from \"./types\";\nimport { getAuthTokenSuccess } from \"./actions\"; // ----------------------------------------------------------------\n// Description: List - Get all Users\n// ----------------------------------------------------------------\n\nvar url = \"\".concat(process.env.REACT_APP_CHRIS_UI_URL);\n\nfunction handleLogin(action) {\n  var authURL, username, authObj, res;\n  return _regeneratorRuntime.wrap(function handleLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          authURL = \"\".concat(process.env.REACT_APP_CHRIS_UI_AUTH_URL);\n          username = action.payload.username;\n          authObj = {\n            password: action.payload.password,\n            username: username\n          };\n          _context.next = 6;\n          return call(Client.getAuthToken, authURL, authObj.username, authObj.password);\n\n        case 6:\n          res = _context.sent;\n\n          if (!res.error) {\n            _context.next = 11;\n            break;\n          }\n\n          console.log(res.error); // working ***** user messaging\n\n          _context.next = 17;\n          break;\n\n        case 11:\n          _context.next = 13;\n          return put(getAuthTokenSuccess(res));\n\n        case 13:\n          window.sessionStorage.setItem(\"AUTH_TOKEN\", res);\n          window.sessionStorage.setItem(\"USERNAME\", username);\n          _context.next = 17;\n          return put(push(\"/\"));\n\n        case 17:\n          _context.next = 24;\n          break;\n\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0); // working user messaging\n\n          _context.next = 24;\n          return put(push(\"/not-found\"));\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 19]]);\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction watchLoginRequest() {\n  return _regeneratorRuntime.wrap(function watchLoginRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(UserActionTypes.FETCH_TOKEN, handleLogin);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // ----------------------------------------------------------------\n// Log user out\n\n\nfunction handleLogout(action) {\n  return _regeneratorRuntime.wrap(function handleLogout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          window.sessionStorage.removeItem(\"AUTH_TOKEN\");\n          window.sessionStorage.removeItem(\"USERNAME\");\n          _context3.next = 4;\n          return put(push(\"/login\"));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogoutRequest() {\n  return _regeneratorRuntime.wrap(function watchLogoutRequest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(UserActionTypes.LOGOUT_USER, handleLogout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // ----------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\n\n\nexport function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLoginRequest), fork(watchLogoutRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/gakumar/Desktop/charts-private/ChRIS_ui/src/store/user/saga.ts"],"names":["handleLogin","watchLoginRequest","handleLogout","watchLogoutRequest","userSaga","all","call","fork","put","takeEvery","push","Client","UserActionTypes","getAuthTokenSuccess","url","process","env","REACT_APP_CHRIS_UI_URL","action","authURL","REACT_APP_CHRIS_UI_AUTH_URL","username","payload","authObj","password","getAuthToken","res","error","console","log","window","sessionStorage","setItem","FETCH_TOKEN","removeItem","LOGOUT_USER"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { push } from \"connected-react-router\";\nimport Client from \"@fnndsc/chrisapi\";\nimport { UserActionTypes } from \"./types\";\nimport { getAuthTokenSuccess } from \"./actions\";\n\n// ----------------------------------------------------------------\n// Description: List - Get all Users\n// ----------------------------------------------------------------\nconst url = `${process.env.REACT_APP_CHRIS_UI_URL}`;\nfunction* handleLogin(action: any) {\n  try {\n    const authURL = `${process.env.REACT_APP_CHRIS_UI_AUTH_URL}`;\n    const username = action.payload.username;\n    const authObj = {\n      password: action.payload.password,\n      username\n    };\n    const res = yield call(\n      Client.getAuthToken,\n      authURL,\n      authObj.username,\n      authObj.password\n    );\n    if (res.error) {\n      console.log(res.error); // working ***** user messaging\n    } else {\n      yield put(getAuthTokenSuccess(res));\n      window.sessionStorage.setItem(\"AUTH_TOKEN\", res);\n      window.sessionStorage.setItem(\"USERNAME\", username);\n      yield put(push(\"/\"));\n    }\n  } catch (error) {\n    console.log(error); // working user messaging\n    yield put(push(\"/not-found\"));\n    // yield put(handleUIMessage({ message: (err instanceof Error ? (err.stack!) :\n    //   managerDefaults.defaultMessage.Error), type: UIMessageType.error, displayType: MessageHandlerType.toastr }));\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchLoginRequest() {\n  yield takeEvery(UserActionTypes.FETCH_TOKEN, handleLogin);\n}\n\n// ----------------------------------------------------------------\n// Log user out\nfunction* handleLogout(action: any) {\n  window.sessionStorage.removeItem(\"AUTH_TOKEN\");\n  window.sessionStorage.removeItem(\"USERNAME\");\n  yield put(push(\"/login\"));\n}\nfunction* watchLogoutRequest() {\n  yield takeEvery(UserActionTypes.LOGOUT_USER, handleLogout);\n}\n// ----------------------------------------------------------------\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* userSaga() {\n  yield all([fork(watchLoginRequest), fork(watchLogoutRequest)]);\n}\n"]},"metadata":{},"sourceType":"module"}