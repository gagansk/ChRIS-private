{"ast":null,"code":"'use strict';\n\nvar Tree = require('js-tree');\n\nvar proto = Tree.prototype;\n\nproto.updateNodesPosition = function () {\n  var top = 1;\n  var left = 1;\n  var root = this.getIndex(1);\n  var self = this;\n  root.top = top++;\n  root.left = left++;\n\n  if (root.children && root.children.length) {\n    walk(root.children, root, left, root.node.collapsed);\n  }\n\n  function walk(children, parent, left, collapsed) {\n    var height = 1;\n    children.forEach(function (id) {\n      var node = self.getIndex(id);\n\n      if (collapsed) {\n        node.top = null;\n        node.left = null;\n      } else {\n        node.top = top++;\n        node.left = left;\n      }\n\n      if (node.children && node.children.length) {\n        height += walk(node.children, node, left + 1, collapsed || node.node.collapsed);\n      } else {\n        node.height = 1;\n        height += 1;\n      }\n    });\n    if (parent.node.collapsed) parent.height = 1;else parent.height = height;\n    return parent.height;\n  }\n};\n\nproto.move = function (fromId, toId, placement) {\n  if (fromId === toId || toId === 1) return;\n  var obj = this.remove(fromId);\n  var index = null;\n  if (placement === 'before') index = this.insertBefore(obj, toId);else if (placement === 'after') index = this.insertAfter(obj, toId);else if (placement === 'prepend') index = this.prepend(obj, toId);else if (placement === 'append') index = this.append(obj, toId); // todo: perf\n\n  this.updateNodesPosition();\n  return index;\n};\n\nproto.getNodeByTop = function (top) {\n  var indexes = this.indexes;\n\n  for (var id in indexes) {\n    if (indexes.hasOwnProperty(id)) {\n      if (indexes[id].top === top) return indexes[id];\n    }\n  }\n};\n\nmodule.exports = Tree;","map":null,"metadata":{},"sourceType":"script"}