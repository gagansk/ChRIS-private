'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactStyles = require('@patternfly/react-styles');

var _tableCss = require('../../../../@patternfly/patternfly/components/Table/table.css.js');

var _tableCss2 = _interopRequireDefault(_tableCss);

var _SelectColumn = require('../../SelectColumn');

var _SelectColumn2 = _interopRequireDefault(_SelectColumn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (label, _ref) {
  var _ref$column$extraPara = _ref.column.extraParams,
      onSelect = _ref$column$extraPara.onSelect,
      allRowsSelected = _ref$column$extraPara.allRowsSelected,
      _ref$column$extraPara2 = _ref$column$extraPara.rowLabeledBy,
      rowLabeledBy = _ref$column$extraPara2 === undefined ? 'simple-node' : _ref$column$extraPara2,
      rowIndex = _ref.rowIndex,
      rowData = _ref.rowData;

  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect) {
    return {
      component: 'td',
      isVisible: true,
      scope: ''
    };
  }
  var rowId = rowIndex !== undefined ? rowIndex : -1;

  function selectClick(event) {
    var selected = rowIndex === undefined ? event.target.checked : rowData && !rowData.selected;
    onSelect && onSelect(event, selected, rowId);
  }
  var customProps = _extends({}, rowId !== -1 ? {
    checked: rowData && !!rowData.selected,
    'aria-labelledby': rowLabeledBy + rowIndex
  } : {
    checked: allRowsSelected,
    'aria-label': 'Select all rows'
  });

  return {
    className: (0, _reactStyles.css)(_tableCss2.default.tableCheck),
    component: 'td',
    scope: '',
    isVisible: true,
    children: _react2.default.createElement(
      _SelectColumn2.default,
      _extends({}, customProps, { onSelect: selectClick, name: rowId !== -1 ? 'checkrow' + rowIndex : 'check-all' }),
      label
    )
  };
};