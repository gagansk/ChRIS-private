import React from 'react';
import { css } from '@patternfly/react-styles';
import styles from '../../../../@patternfly/patternfly/components/Table/table.css.js';
import CollapseColumn from '../../CollapseColumn';
import ExpandableRowContent from '../../ExpandableRowContent';

export var collapsible = function collapsible(value, _ref) {
  var rowIndex = _ref.rowIndex,
      rowData = _ref.rowData,
      _ref$column$extraPara = _ref.column.extraParams,
      onCollapse = _ref$column$extraPara.onCollapse,
      _ref$column$extraPara2 = _ref$column$extraPara.rowLabeledBy,
      rowLabeledBy = _ref$column$extraPara2 === undefined ? 'simple-node' : _ref$column$extraPara2,
      _ref$column$extraPara3 = _ref$column$extraPara.expandId,
      expandId = _ref$column$extraPara3 === undefined ? 'expand-toggle' : _ref$column$extraPara3;

  function onToggle(event) {
    onCollapse && onCollapse(event, rowIndex, rowData && !rowData.isOpen);
  }
  return {
    className: css(styles.tableToggle),
    isVisible: true,
    children: React.createElement(
      CollapseColumn,
      {
        'aria-labelledby': '' + rowLabeledBy + rowIndex + ' ' + expandId + rowIndex,
        onToggle: onToggle,
        id: expandId + rowIndex,
        isOpen: rowData && rowData.isOpen
      },
      value
    )
  };
};

export var expandedRow = function expandedRow(colSpan) {
  var expandedRowFormatter = function expandedRowFormatter(value, _ref2) {
    var rowIndex = _ref2.rowIndex,
        rowData = _ref2.rowData,
        _ref2$column$extraPar = _ref2.column.extraParams.contentId,
        contentId = _ref2$column$extraPar === undefined ? 'expanded-content' : _ref2$column$extraPar;
    return rowData.hasOwnProperty('parent') && {
      colSpan: colSpan,
      children: React.createElement(
        ExpandableRowContent,
        { id: contentId + rowIndex },
        value.title || value
      )
    };
  };
  return expandedRowFormatter;
};