var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import { Table, TableHeader, TableBody } from '@patternfly/react-table';

var CollapsibleTable = function (_React$Component) {
  _inherits(CollapsibleTable, _React$Component);

  function CollapsibleTable(props) {
    _classCallCheck(this, CollapsibleTable);

    var _this = _possibleConstructorReturn(this, (CollapsibleTable.__proto__ || Object.getPrototypeOf(CollapsibleTable)).call(this, props));

    _this.state = {
      columns: [{ title: 'Header cell' }, 'Branches', { title: 'Pull requests' }, 'Workspaces', {
        title: 'Last Commit'
      }],
      rows: [{
        cells: ['one', 'two', 'three', 'four', 'five']
      }, {
        isOpen: true,
        cells: ['parent - 1', 'two', 'three', 'four', 'five']
      }, {
        parent: 1,
        cells: ['child - 1']
      }, {
        isOpen: false,
        cells: ['parent - 2', 'two', 'three', 'four', 'five']
      }, {
        parent: 3,
        cells: ['child - 2']
      }, {
        isOpen: false,
        cells: ['parent - 3', 'two', 'three', 'four', 'five']
      }, {
        parent: 5,
        cells: ['child - 3']
      }]
    };
    _this.onCollapse = _this.onCollapse.bind(_this);
    return _this;
  }

  _createClass(CollapsibleTable, [{
    key: 'onCollapse',
    value: function onCollapse(event, rowKey, isOpen) {
      var rows = this.state.rows;
      /**
       * Please do not use rowKey as row index for more complex tables.
       * Rather use some kind of identifier like ID passed with each row.
       */

      rows[rowKey].isOpen = isOpen;
      this.setState({
        rows: rows
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          columns = _state.columns,
          rows = _state.rows;


      return React.createElement(
        Table,
        { caption: 'Collapsible table', onCollapse: this.onCollapse, rows: rows, cells: columns },
        React.createElement(TableHeader, null),
        React.createElement(TableBody, null)
      );
    }
  }]);

  return CollapsibleTable;
}(React.Component);

export default CollapsibleTable;