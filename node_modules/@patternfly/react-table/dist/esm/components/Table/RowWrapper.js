var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styles from '../../@patternfly/patternfly/components/Table/table.css.js';
import { css } from '@patternfly/react-styles';

var RowWrapper = function RowWrapper(_ref) {
  var isOpen = _ref.isOpen,
      isExpanded = _ref.isExpanded,
      props = _objectWithoutProperties(_ref, ['isOpen', 'isExpanded']);

  return React.createElement('tr', _extends({}, props, {
    className: css(isExpanded !== undefined && styles.tableExpandableRow, isExpanded && styles.modifiers.expanded),
    hidden: isExpanded !== undefined && !isExpanded
  }));
};

RowWrapper.propTypes = {
  isOpen: PropTypes.bool,
  isExpanded: PropTypes.bool
};

RowWrapper.defaultProps = {
  isOpen: undefined,
  isExpanded: undefined
};

export default RowWrapper;